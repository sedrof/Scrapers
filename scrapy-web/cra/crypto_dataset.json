[
    {
        "crypto_name": "Illust Space",
        "active_users": "Daily",
        "visitors": "0"
    },
    {
        "crypto_name": "Cryptovoxels",
        "active_users": "Daily",
        "visitors": "3"
    },
    {
        "crypto_name": "Upland",
        "active_users": "Daily",
        "visitors": "25,863"
    },
    {
        "crypto_name": "Fyooz",
        "active_users": "Daily",
        "visitors": "3"
    },
    {
        "crypto_name": "Effect.AI",
        "active_users": "Daily",
        "visitors": "3"
    },
    {
        "crypto_name": "Decentralized Nations",
        "active_users": "Daily",
        "visitors": "14"
    },
    {
        "crypto_name": "Ocean Market",
        "active_users": "Daily",
        "visitors": "56"
    },
    {
        "crypto_name": "Uniswap",
        "active_users": "Daily",
        "visitors": "482"
    },
    {
        "crypto_name": "XYO World",
        "active_users": "Daily",
        "visitors": "1"
    },
    {
        "crypto_name": "Spells of Genesis",
        "active_users": "Daily",
        "visitors": "1"
    },
    {
        "crypto_name": "KLAYswap",
        "active_users": "Daily",
        "visitors": "8,404"
    }
]


{
    "/api/hr/v2/userroles.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "This API call returns detailed information about the currently authenticated user including some data from his/her profile.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "Get roles for authenticated user.",
        "scope": "View the structure of your companies/teams",
        "nickname": "getAuthUserInfo",
        "method": "GET"
    },
    "/api/team/v2/workdiaries/contracts/{contract_id}/{date}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "contract_id",
                "description": "The contract ID or a list of contract IDs, separated by semicolon (';')."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "date",
                "description": "The target date in `yyyymmdd` format. If absent, it defaults to today."
            },
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "enum": [
                    "mine",
                    "user",
                    "gmt"
                ],
                "name": "tz",
                "defaultValue": "mine",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The time zone to use."
            }
        ],
        "notes": "The Work Diary method retrieves all snapshots from a single user account within a single day. Keep in mind that a day is dependent on server time and not the day in which the query is made. Make sure to test with various locations before you're done.'",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "Bad Request",
                "code": 400
            }
        ],
        "summary": "Get Work Diary by Contract.",
        "scope": "View your workdiary",
        "nickname": "getWorkdiaryByContract",
        "method": "GET"
    },
    "/api/otask/v1/tasks/companies/{company_id}/teams/{team_id}/tasks/{code}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_id",
                "description": "The company ID. Use the `parent_team__id` value from the 'Get teams' API call."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "team_id",
                "description": "The team ID."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "code",
                "description": "The specific task code. It can be the list of codes, separated by ';' (semicolon). Example: `code=mycode01;mycode02;XYZ`."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "This call returns details on a single activity or a set of activities within a team.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "No access to company",
                "code": 403
            },
            {
                "message": "No access to team",
                "code": 403
            }
        ],
        "summary": "Get team activity by code.",
        "scope": "View task codes",
        "nickname": "getTeamTask",
        "method": "GET"
    },
    "/api/hr/v2/teams/{team_reference}/users.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "integer",
                "name": "team_reference",
                "description": "The reference ID of the team."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "This call returns a list of teams within the company being referenced (as long as the user has access to the referenced company).",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "List Team's users.",
        "outputFields": [
            {
                "name": "id",
                "description": "User ID"
            },
            {
                "name": "reference",
                "description": "User reference"
            },
            {
                "name": "first_name",
                "description": "User's first name"
            },
            {
                "name": "last_name",
                "description": "User's last name"
            },
            {
                "name": "timezone_offset",
                "description": "Offset for user's timezone"
            },
            {
                "name": "public_url",
                "description": "User's public profile url"
            },
            {
                "name": "is_provider",
                "description": "Is it a contractor"
            },
            {
                "name": "has_contract",
                "description": "Flag indicates whether the user has a contract"
            },
            {
                "name": "status",
                "description": "User status in this team"
            }
        ],
        "scope": "View the structure of your companies/teams",
        "nickname": "hrListTeamUsers",
        "method": "GET"
    },
    "/api/profiles/v2/metadata/categories.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": true,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "specialty",
                "description": "Filter skills by the specialty UID of the job according to the list of Specialties. Example: `1110238407677218816`. You can get it via Metadata Specialty resource. Required if `skills` parameter is used based on Skills (V2) API response."
            },
            {
                "enum": [
                    "true",
                    "false"
                ],
                "name": "extended",
                "defaultValue": "false",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "Return extended response which contains skill UID."
            },
            {
                "name": "paging",
                "paramType": "query",
                "required": false,
                "type": "string",
                "defaultValue": "0;10",
                "description": "Pagination, formed as `$offset;$count`. Page size is restricted to be <= 50. Example: page=100;5. Can not be used together with `specialty` parameter."
            }
        ],
        "notes": "Returns a list of categories for a job/freelancer profile from new structure.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Bad request",
                "code": 400
            }
        ],
        "summary": "List categories (v2).",
        "scope": "Read and search profiles of contractors and jobs, and get lists of public metadata",
        "nickname": "listMetadataCategories",
        "method": "GET"
    },
    "/api/team/v1/snapshots/{company_id}/{username}/{timestamp}.{format}:DELETE": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_id",
                "description": "The company ID."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "username",
                "description": "The username of the target user account."
            },
            {
                "paramType": "path",
                "required": false,
                "type": "string",
                "name": "timestamp",
                "description": "The timestamp either in UTC according to ISO 8601 (yyyymmddTHHMMSSZ) or as a UNIX timestamp (number of seconds after epoch). If absent, it defaults to the current time. More than one timestamps can be specified either as a range or as a list of values. For timestamp range use the comma character (','). Example: `20081205T090351Z,20081205T091853Z`. For list of timestamps, use the semicolon character (';'), example: `20081205T090351Z;20081405T090851Z;20081705T091853Z`."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "One or several snapshots can be deleted, see the `timestamp` parameters description.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden (user is not invited to specified company)",
                "code": 403
            }
        ],
        "summary": "Delete snapshot.",
        "scope": "Modify your workdiary",
        "nickname": "deleteSnapshot",
        "method": "DELETE"
    },
    "/api/messages/v3/{company_user_id}/rooms/{room_id}/stories.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_user_id",
                "description": "The company ID or team ID, or user ID. Use 'List companies' or 'List teams' API calls to get the team/company IDs."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "room_id",
                "description": "The room ID. Use 'Retrieve rooms information' API to get the list of IDs."
            },
            {
                "name": "format",
                "paramType": "path",
                "required": false,
                "type": "string",
                "defaultValue": "json",
                "description": "Response format."
            },
            {
                "name": "locale",
                "paramType": "query",
                "required": false,
                "type": "string",
                "defaultValue": "en_US",
                "description": "When getting rooms for a user, the latest story is returned. This is the locale used for the latest story."
            },
            {
                "name": "limit",
                "paramType": "query",
                "required": false,
                "type": "integer",
                "defaultValue": "100",
                "description": "The maximum number of stories to be returned. Used only for paginating through the result set. Maximum value allowed: `1000`. Used only for paginating through the result set."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "cursor",
                "description": "The cursor used to walk through the list records."
            }
        ],
        "notes": "Gets messages/stories from a specific room.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "The room does not exist",
                "code": 404
            }
        ],
        "summary": "Get messages/stories from a specific room.",
        "outputFields": [
            {
                "name": "stories.storyId",
                "description": "Story ID"
            },
            {
                "name": "stories.created",
                "description": "Indicates when the message was created"
            },
            {
                "name": "stories.updated",
                "description": "Indicates when the message was updated"
            },
            {
                "name": "stories.userId",
                "description": "ID of a user who posted the message"
            },
            {
                "name": "stories.message",
                "description": "Message"
            },
            {
                "name": "stories.isSystemStory",
                "description": "Flag indicates whether the message is system"
            },
            {
                "name": "cursor",
                "description": "Current position of a cursor"
            },
            {
                "name": "total",
                "description": "Total number of messages"
            }
        ],
        "scope": "Gets the rooms for the current user and organization",
        "nickname": "messagesFromRoom",
        "method": "GET"
    },
    "/api/profiles/v1/providers/{profile_key}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "profile_key",
                "description": "The freelancer's profile key or a list of keys, separated by semicolon (';'). The number of keys per request is limited to 20."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "The API takes a profile key and returns detailed profile information about a freelancer or list of freelancers. This call returns an exhaustive list of attributes associated with the freelancer. If you're looking for a shorter summary, use the brief version of this call (GET /api/profiles/v1/providers/{profile_key}/brief.{format}).",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Request Entity Too Large",
                "code": 413
            }
        ],
        "summary": "Get freelancer profile by key.",
        "outputFields": [
            {
                "name": "skills.skl_name",
                "description": "Name of skill"
            },
            {
                "name": "skills.skl_rank",
                "description": "Indicates the order in which the freelancer has ranked the skill on their profile. Lower numbers first"
            },
            {
                "name": "skills.skl_external_link",
                "description": "URL of description of skill"
            },
            {
                "name": "skills.skl_has_tests",
                "description": "Indicates whether a test is available to evaluate the skill on oDesk"
            },
            {
                "name": "skills.skl_description",
                "description": "A short description of the skill"
            },
            {
                "name": "tsexams.ts_percentile",
                "description": "The freelancer's relative rank amongst all takers of the given test"
            },
            {
                "name": "tsexams.ts_score",
                "description": "The score (out of 5, 5 being best) received by the freelancer on the given test"
            },
            {
                "name": "tsexams.ts_pass",
                "description": "1 if test passed, null if test failed"
            },
            {
                "name": "tsexams.ts_when",
                "description": "MM/DD/YYYY date when freelancer took the test"
            },
            {
                "name": "tsexams.ts_id",
                "description": "Unique ID of a test"
            },
            {
                "name": "tsexams.ts_name_raw",
                "description": "Raw test name"
            },
            {
                "name": "tsexams.ts_duration",
                "description": "Test duration"
            },
            {
                "name": "experiences.exp_from",
                "description": "MM/YYYY that freelancer began a given professional experience"
            },
            {
                "name": "experiences.exp_company",
                "description": "Name of organization with which a freelancer had a given professional experience"
            },
            {
                "name": "experiences.exp_title_raw",
                "description": "Freelancer's title for a given professional experience"
            },
            {
                "name": "experiences.exp_to",
                "description": "MM/YYYY that freelancer ended a given professional experience"
            },
            {
                "name": "experiences.exp_comment",
                "description": "Freelancer's description of a given professional experience"
            },
            {
                "name": "dev_first_name",
                "description": "Freelancer's first name"
            },
            {
                "name": "dev_last_name",
                "description": "Freelancer's last name"
            },
            {
                "name": "dev_eng_skill",
                "description": "Freelancer's self-reported English skill, 1-5, 5 highest"
            },
            {
                "name": "ciphertext",
                "description": "Freelancer's ciphertext"
            },
            {
                "name": "dev_total_hours",
                "description": "Total hours worked on oDesk"
            },
            {
                "name": "dev_country",
                "description": "Freelancer's country"
            },
            {
                "name": "dev_tot_feedback",
                "description": "Number of times freelancer has received feedback on oDesk"
            },
            {
                "name": "dev_is_affiliated",
                "description": "Indicates whether a given freelancer is affiliated with an agency"
            },
            {
                "name": "dev_ac_agencies.ciphertext",
                "description": "Agency ciphertext"
            },
            {
                "name": "dev_ac_agencies.ag_adj_score",
                "description": "Feedback score of the agency"
            },
            {
                "name": "dev_ac_agencies.ag_tot_feedback",
                "description": "Number of times the agency has received feedback on oDesk"
            },
            {
                "name": "dev_ac_agencies.ag_total_hours",
                "description": "Agency's total hours billed"
            },
            {
                "name": "dev_ac_agencies.ag_name",
                "description": "Agency's name"
            },
            {
                "name": "dev_ac_agencies.ag_logo",
                "description": "URL of the agency logo"
            },
            {
                "name": "dev_adj_score",
                "description": "Freelancer's feedback score"
            },
            {
                "name": "dev_adj_score_recent",
                "description": "Freelancer's recent feedback score"
            },
            {
                "name": "dev_portrait_50",
                "description": "URL of the freelancers profile pciture 50 x 50 px"
            },
            {
                "name": "dev_last_worked",
                "description": "m d, YYYY Date freelancer last worked on oDesk"
            },
            {
                "name": "education.ed_school",
                "description": "Name of institution"
            },
            {
                "name": "education.ed_from",
                "description": "MM/YYYY that freelancer began an educational experience"
            },
            {
                "name": "education.ed_to",
                "description": "MM/YYYY that freelancer ended an educational experience"
            },
            {
                "name": "education.ed_area",
                "description": "Freelancer's academic concetration/focus"
            },
            {
                "name": "education.ed_degree",
                "description": "Level of degree obtained from this institution"
            },
            {
                "name": "education.ed_comment",
                "description": "Freelancer's description of the educational experience/institution"
            },
            {
                "name": "dev_groups.group_name",
                "description": "Name of group"
            },
            {
                "name": "dev_groups.group_small_logo",
                "description": "Group small logo"
            },
            {
                "name": "dev_groups.htmlblob_profile",
                "description": "Summary/description of the group"
            },
            {
                "name": "dev_groups.num_group_members",
                "description": "# of members in the group"
            },
            {
                "name": "dev_groups.group_logo",
                "description": "URL of the group logo - full size"
            },
            {
                "name": "dev_blurb",
                "description": "Freelancer's profile overview"
            },
            {
                "name": "dev_recno_ciphertext",
                "description": "Freelancer's profile ciphertext"
            },
            {
                "name": "dev_portrait_100",
                "description": "URL of the freelancers profile pciture 100 x 100 px"
            },
            {
                "name": "dev_portfolio_items_count",
                "description": "Total portfolio items from old version of portfolio"
            },
            {
                "name": "dev_portfolio_items_v2_count",
                "description": "Total portfolio items from new version of portfolio"
            },
            {
                "name": "dev_ui_profile_access",
                "description": "Public or Auth. Freelancer's profile privacy preference"
            },
            {
                "name": "dev_billed_assignments",
                "description": "# of assignments on which the freelancer has billed"
            },
            {
                "name": "assignments.hr",
                "description": "List of freelancer's hourly assignments"
            },
            {
                "name": "assignments.fr",
                "description": "List of freelancer's fixed-price assignments"
            },
            {
                "name": "dev_bill_rate",
                "description": "Freelancer's bill rate"
            },
            {
                "name": "dev_portrait_32",
                "description": "URL of 32x32 portrait"
            },
            {
                "name": "dev_portrait",
                "description": "Freelancer portrait"
            },
            {
                "name": "dev_city",
                "description": "Freelancer's city"
            },
            {
                "name": "dev_timezone",
                "description": "Freelancer's timezone"
            },
            {
                "name": "dev_last_activity",
                "description": "Freelancer's last activity on oDesk"
            },
            {
                "name": "permalink",
                "description": "Link to freelancer's profile"
            },
            {
                "name": "agency_ciphertext",
                "description": "Agency identifier"
            },
            {
                "name": "ag_country_tz",
                "description": "Agency timezone"
            },
            {
                "name": "ag_recent_hours",
                "description": "Recent hours billed with an agency"
            },
            {
                "name": "ag_country",
                "description": "Agency country"
            },
            {
                "name": "ag_logo",
                "description": "Agency logo link"
            },
            {
                "name": "ag_description",
                "description": "Agency description"
            },
            {
                "name": "ag_total_hours",
                "description": "Total hours billed with an agency"
            },
            {
                "name": "ag_name",
                "description": "Agency name"
            },
            {
                "name": "dev_recno",
                "description": "Freelancer's reference"
            },
            {
                "name": "dev_short_name",
                "description": "Freelancer's short name"
            },
            {
                "name": "job_categories_for_xml",
                "description": "Job categories"
            },
            {
                "name": "dev_job_categories_v2",
                "description": "Job categories (V2)"
            },
            {
                "name": "ag_cny_recno",
                "description": "Agency's record ID"
            },
            {
                "name": "dev_profile_title",
                "description": "Profile title"
            },
            {
                "name": "dev_last_worked_ts",
                "description": "Las worked date"
            },
            {
                "name": "is_favorite",
                "description": "Favorite flag"
            },
            {
                "name": "portfolio_items.pi_recno",
                "description": "Unique reference"
            },
            {
                "name": "portfolio_items.pi_title",
                "description": "Portfolio title"
            },
            {
                "name": "portfolio_items.pi_large_thumbnail",
                "description": "Portfolio thumbnail"
            },
            {
                "name": "portfolio_items.pi_image",
                "description": "Portfolio image"
            },
            {
                "name": "portfolio_items_v2.pi_recno",
                "description": "Unique reference"
            },
            {
                "name": "portfolio_items_v2.pi_title",
                "description": "Portfolio title"
            },
            {
                "name": "portfolio_items_v2.pi_large_thumbnail",
                "description": "Portfolio thumbnail"
            },
            {
                "name": "portfolio_items_v2.pi_image",
                "description": "Portfolio image"
            },
            {
                "name": "as_rate",
                "description": "Hourly rate of an hourly assignment"
            },
            {
                "name": "as_to",
                "description": "MM/YYYY of the end of the assignment"
            },
            {
                "name": "as_total_hours",
                "description": "Total hours billed on an hourly assignment"
            },
            {
                "name": "as_agency_name",
                "description": "Name of agency under which assignment was completed"
            },
            {
                "name": "as_to_full",
                "description": "MM/DD/YYYY of the end of the assignment.  \"Present\" if assignment is ongoing"
            },
            {
                "name": "as_from_full",
                "description": "MM/DD/YYYY of the start of the assignment"
            },
            {
                "name": "as_opening_title",
                "description": "Title of the job associated with this assignment"
            },
            {
                "name": "as_ciphertext_opening_recno",
                "description": "Ciphertext (unique identifier) for the job associated with this assignment"
            },
            {
                "name": "as_total_charge",
                "description": "Total charge associated to this assignment to-date"
            },
            {
                "name": "as_job_type",
                "description": "Hourly or Fixed"
            },
            {
                "name": "as_total_hours_precise",
                "description": "Precise number of total hours"
            },
            {
                "name": "as_financial_privacy",
                "description": "Flag that indicates financial privacy"
            },
            {
                "name": "feedback.scores.label",
                "description": "Feedback type label \"Skills\",\"Quality\", etc"
            },
            {
                "name": "feedback.scores.description",
                "description": "Standard description of feedback type"
            },
            {
                "name": "feedback.scores.comment",
                "description": "Client's feedback comment on the relevant asignment"
            },
            {
                "name": "feedback.scores.score",
                "description": "Feedback score"
            },
            {
                "name": "feedback.score",
                "description": "Aggregate feedback score for the job based on all individual feedback type scores"
            },
            {
                "name": "feedback.comment",
                "description": "Client's feedback comment on the relevant asignment"
            }
        ],
        "scope": "Read and search profiles of contractors and jobs, and get lists of public metadata",
        "nickname": "getFreelancerProfileByKey",
        "method": "GET"
    },
    "/api/team/v3/workdiaries/contracts/{contract_ids}/{date}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "contract_ids",
                "description": "The list of contract IDs, separated by semicolon (';')."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "date",
                "description": "The target date in `yyyymmdd` format. If absent, it defaults to today."
            },
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "offset",
                "description": "Offset in seconds to support the different time zones."
            }
        ],
        "notes": "The Work Diary method retrieves all snapshots from a single user account within a single day. Keep in mind that a day is dependent on server time and not the day in which the query is made. Make sure to test with various locations before you're done.'",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "Bad Request",
                "code": 400
            }
        ],
        "summary": "Get Work Diary by a List of Contracts.",
        "outputFields": [
            {
                "name": "snapshots.assignment.id",
                "description": "Contract ID"
            },
            {
                "name": "snapshots.user.uid",
                "description": "User ID"
            },
            {
                "name": "snapshots.user.first_name",
                "description": "Last name"
            },
            {
                "name": "snapshots.user.portrait_url",
                "description": "Portrait URL"
            },
            {
                "name": "snapshots.user.timezone",
                "description": "Timezone"
            },
            {
                "name": "snapshots.user.timezone_offset",
                "description": "Timezone offset"
            },
            {
                "name": "snapshots.user.archiving_time",
                "description": "Archiving time"
            },
            {
                "name": "snapshots.snapshots.cell_time",
                "description": "Cell timestamp"
            },
            {
                "name": "snapshots.snapshots.time",
                "description": "Snapshot timestamp"
            },
            {
                "name": "snapshots.snapshots.billing_status",
                "description": "Billing status"
            },
            {
                "name": "snapshots.snapshots.allow_edit",
                "description": "Flag inticates the allowance to edit"
            },
            {
                "name": "snapshots.snapshots.activity",
                "description": "Flag indicates the level of activity"
            },
            {
                "name": "snapshots.snapshots.memo",
                "description": "Memo"
            },
            {
                "name": "snapshots.snapshots.task.id",
                "description": "ID"
            },
            {
                "name": "snapshots.snapshots.task.description",
                "description": "Description"
            },
            {
                "name": "snapshots.snapshots.mouse_events_count",
                "description": "Mouse events"
            },
            {
                "name": "snapshots.snapshots.keyboard_events_count",
                "description": "Keyboard events"
            },
            {
                "name": "snapshots.snapshots.computer_name",
                "description": "computer_name"
            },
            {
                "name": "snapshots.snapshots.active_window_title",
                "description": "Active window title"
            },
            {
                "name": "snapshots.snapshots.flags.hide_screenshots",
                "description": "Flag indicates hidden screenshot"
            },
            {
                "name": "snapshots.snapshots.flags.downsample_screenshots",
                "description": "Flag indicates downsaples"
            },
            {
                "name": "snapshots.snapshots.has_screenshot",
                "description": "Flag indicates if the cell has a screenshot"
            },
            {
                "name": "snapshots.snapshots.screenshot_url",
                "description": "Screenshot URL"
            },
            {
                "name": "snapshots.snapshots.screenshot_img",
                "description": "Screenshot image"
            },
            {
                "name": "snapshots.snapshots.screenshot_img_med",
                "description": "Medium screenshot image"
            },
            {
                "name": "snapshots.snapshots.screenshot_img_thmb",
                "description": "Screenshot thumbnail"
            },
            {
                "name": "snapshots.snapshots.has_webcam",
                "description": "Flag indicates if webcam image exists"
            },
            {
                "name": "snapshots.snapshots.webcam_url",
                "description": "Webcam URL"
            },
            {
                "name": "snapshots.snapshots.webcam_img",
                "description": "Webcam image"
            },
            {
                "name": "snapshots.snapshots.webcam_img_thmb",
                "description": "Webcam thumbnail"
            },
            {
                "name": "snapshots.snapshots.status",
                "description": "Status"
            }
        ],
        "scope": "View your workdiary",
        "nickname": "getWorkdiaryByContractList",
        "method": "GET"
    },
    "/api/hr/v2/teams/{team_reference}/adjustments.{format}:POST": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "integer",
                "name": "team_reference",
                "description": "The reference ID of the team."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "engagement__reference",
                "description": "The engagement ID number of the Custom payment. You can obtain this ID number using the `List engagements` API call. Example: `34567`."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "comments",
                "description": "A comment about the custom payment. Example: `Bonus for good job`."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "number",
                "name": "charge_amount",
                "description": "The amount that is charged to the client. Example: `110`."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "notes",
                "description": "Private notes about the Custom Payment."
            },
            {
                "name": "allow_subsequent",
                "paramType": "query",
                "required": false,
                "type": "boolean",
                "defaultValue": true,
                "description": "Flag to allow payments with the same amount for the same freelancer in the same day."
            }
        ],
        "notes": "This call is designed for making custom payments for a specific team and engagement in that team.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "Submit custom payment.",
        "scope": "Make one-time payments to your contractors",
        "nickname": "hrPostAdjustment",
        "method": "POST"
    },
    "/ab/account-security/oauth2/authorize:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "code",
                    "token"
                ],
                "name": "response_type",
                "paramType": "query",
                "required": true,
                "type": "string",
                "description": "The corresponding Grant Type. Use 'code' for Authorization Code Grant and 'token' for Implicit Grant."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "client_id",
                "description": "Your Client ID."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "redirect_uri",
                "description": "The callback URL."
            }
        ],
        "notes": "This call provides access to the authorization screen in OAuth 2.0 workflow.",
        "responseMessages": [
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "Authorization endpoint for OAuth 2.0 workflow.",
        "scope": "No special permissions are required",
        "nickname": "oauth2-authorize-application",
        "method": "GET"
    },
    "/api/hr/v3/fp/milestones/{milestone_id}/activate.{format}:PUT": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "name": "milestone_id",
                "allowMultiple": false,
                "required": true,
                "type": "integer",
                "paramType": "path",
                "description": "Milestone reference."
            },
            {
                "name": "message",
                "allowMultiple": false,
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "Message from the client to the freelancer."
            }
        ],
        "notes": "This API call allows a Hiring Manager to activate a Milestone. Note that the user must be authorized in Upwork and must be a Hiring Manager in the team to be able to activate the milestone.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "No recruiter or hiring manager permissions",
                "code": 403
            },
            {
                "message": "No access to team/company",
                "code": 403
            },
            {
                "message": "This function cannot be used to activate the first milestone",
                "code": 400
            },
            {
                "message": "Invalid state '{state}'",
                "code": 400
            },
            {
                "message": "Invalid previous milestone state '{state}'",
                "code": 400
            }
        ],
        "summary": "Activates a milestone that has not been funded.",
        "scope": "Modify milestones and submissions on your behalf",
        "nickname": "putActivateMilestone",
        "method": "PUT"
    },
    "/api/offers/v1/clients/offers.{format}:POST": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "title",
                "description": "The title of the offer/contract."
            },
            {
                "enum": [
                    "hourly",
                    "fixed-price"
                ],
                "name": "job_type",
                "paramType": "query",
                "required": true,
                "type": "string",
                "description": "The type of the job."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "number",
                "name": "charge_rate",
                "description": "The budget amount for fixed-price jobs or the hourly charge rate for hourly jobs."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "message_to_contractor",
                "description": "Instructions and other job details for the freelancer."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "category2",
                "description": "The category UID of the job according to the list of Categories 2.0. Example: `531770282580668418`. You can get it via Metadata Category (V2) resource as category ID. Strongly recommended if `job__reference`/`context[job_posting_ref]` parameter is not specified. If `job__reference`/`context[job_posting_ref]` is specified, this parameter will be ignored."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "subcategory2",
                "description": "The subcategory UID of the job according to the list of Categories 2.0. Example: `531770282589057025`. You can get it via Metadata Category (V2) resource as a topic ID. Strongly recommended if `job__reference`/`context[job_posting_ref]` parameter is not specified. If `job__reference`/`context[job_posting_ref]` is specified, this parameter will be ignored."
            },
            {
                "name": "specialty",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "The specialty UID of the job according to the list of Specialties. Example: `1110238407677218816`. You can get it via Metadata List specialties (v2) resource. You can specify a job category in different ways: either by directly using the `specialty`, `category`, and `subcategory` parameters or by using `job__reference`/`context[job_posting_ref]`. If `job__reference` or `context[job_posting_ref]` is specified, then the job category is read from the referenced job posting, and this parameter will be ignored, otherwise it's required."
            },
            {
                "name": "team__reference",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "The client's team reference ID. Example: `34567`. This parameter is conditionally optional and required if you send offer 'on the fly' without providing context about any existing job. If you send offer for the existing job, the `team__reference` parameter becomes optional and will be taken automatically from job's data relying on the provided ``context[job_posting_ref]`` parameter. Use 'List teams' API call to get team reference ID."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "job__reference",
                "description": "The job reference ID - same as context[job_posting_ref]. Get it using 'List jobs' API call."
            },
            {
                "name": "client_team_ref",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "The client's team reference. Example: `mytestcompany:myteam`. This parameter is conditionally optional and required if you send offer 'on the fly' without providing context about any existing job. Use `List teams` API call to get it."
            },
            {
                "name": "contractor_username",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "The freelancer's username. Example: `contractoruid`. It can be ignored if `contractor_reference` or `contractor_key` parameter is set."
            },
            {
                "name": "contractor_reference",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "The freelancer's reference ID. It is ignored if the parameter `contractor_username` or `contractor_key` is specified. Example: `1234`. You can use `Search freelancers` API call to get the freelancer's reference ID."
            },
            {
                "name": "contractor_key",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "The unique profile key, used if `contractor_username` is absent. Example: `~~677961dcd7f65c01`."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "contractor_org",
                "description": "Optional param for cases of non-exclusive agency contractors. Please provide here, freelancer's agency reference, to which the offer should be sent. You can specify `0` if you create an offer for non-exclusive agency contractor as an individual."
            },
            {
                "name": "context",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "Additional data about the offer. This parameter is required in case you want to send an offer for the job that is already created. Valid array keys are: `previous_offer_ref`, `job_posting_ref`, `cj_job_application_uid` (must be always used with `job__reference`), `contract_ref`. Example: `context[job_posting_ref] = {{ opening_id }} & context[cj_job_application_uid] = {{ application_id }}` where `job_posting_ref` is a job key, for example `~01c8e0xxxxxxxx05255`."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "integer",
                "name": "weekly_limit",
                "description": "The maximum number of hours per week the freelancer can bill for."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "number",
                "name": "weekly_stipend",
                "description": "An additional payment to be issued to the freelancer each week."
            },
            {
                "enum": [
                    "0",
                    "1"
                ],
                "name": "close_on_accept",
                "defaultValue": "1",
                "required": false,
                "type": "integer",
                "paramType": "query",
                "description": "If the value is true, it automatically closes the related job post if this offer is accepted. The default value is true."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "start_date",
                "description": "The start date of the hourly-priced contract. Example: `06-15-2011`"
            },
            {
                "name": "milestones",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "array",
                "description": "Array of milestones for fixed-priced jobs in the following format: `milestones[0][$key]`, ..., `milestones[N][$key]`, where key is one of the following - `milestone_description` (string), `deposit_amount` (float), `due_date` (string in format mm-dd-yyyy). Required for fixed-priced jobs."
            }
        ],
        "notes": "This call sends an offer to a freelancer.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "No recruiter or hiring manager permissions",
                "code": 403
            },
            {
                "message": "No access to team/company",
                "code": 403
            },
            {
                "message": "Required field is missing",
                "code": 400
            }
        ],
        "summary": "Send offer to the freelancer.",
        "scope": "Make a job offer on your behalf",
        "nickname": "sendClientOffer",
        "method": "POST"
    },
    "/api/team/v1/workdiaries/{company_id}/{username}/{date}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_or_team",
                "description": "The company ID or team ID. Use 'List companies' or 'List teams' API calls to get the IDs."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "username",
                "description": "The username of the target user account. This is your or your team mate username."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "date",
                "description": "The target date in `yyyymmdd` format. If absent, it defaults to today."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "enum": [
                    "mine",
                    "user",
                    "gmt"
                ],
                "name": "tz",
                "defaultValue": "mine",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The time zone to use."
            }
        ],
        "notes": "The Work Diary method retrieves all snapshots from a single user account within a single day. Keep in mind that a day is dependent on server time and not the day in which the query is made. Make sure to test with various locations before you're done.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden (user is not invited to specified company)",
                "code": 403
            }
        ],
        "summary": "Get workdiary.",
        "scope": "View your workdiary",
        "nickname": "getWorkdiary",
        "method": "GET"
    },
    "/services/api/auth:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "oauth_token",
                "description": "This is a request token received in the first step of oAuth workflow."
            }
        ],
        "notes": "If the user is not logged in to Upwork, she/he is asked to do so via 'www.upwork.com/login?redir=https://www.upwork.com/services/api/auth'. Upwork checks if the user has already authorized this application. If the application is already authorized, the user is redirected to the application using the callback URL provided with the request or (if empty) the one registered for the used OAuth key. If the user has not authorized the application Upwork asks her/him to do so.",
        "responseMessages": [
            {
                "message": "oAuth token not found",
                "code": 403
            }
        ],
        "summary": "Authorize user and application at Upwork.",
        "scope": "Standard authorization at Upwork is required",
        "nickname": "authorize-request",
        "method": "GET"
    },
    "/api/messages/v3/{company_user_id}/rooms/{room_id}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_user_id",
                "description": "The company ID or team ID, or user ID. Use 'List companies' or 'List teams' API calls to get the team/company IDs."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "room_id",
                "description": "The room ID. Use 'Retrieve rooms information' API to get the list of IDs."
            },
            {
                "name": "format",
                "paramType": "path",
                "required": false,
                "type": "string",
                "defaultValue": "json",
                "description": "Response format."
            },
            {
                "enum": [
                    "true",
                    "false"
                ],
                "name": "returnUserTimestamps",
                "paramType": "query",
                "required": false,
                "type": "boolean",
                "description": "Indicates whether or not the current user's timestamps and the first several stories in the room should be returned in the response."
            },
            {
                "enum": [
                    "true",
                    "false"
                ],
                "name": "returnStories",
                "paramType": "query",
                "required": false,
                "type": "boolean",
                "description": "Indicates whether the latest stories in the room should be returned."
            },
            {
                "enum": [
                    "true",
                    "false"
                ],
                "name": "returnUsers",
                "paramType": "query",
                "required": false,
                "type": "boolean",
                "description": "Indicates whether the list of users in the room should be returned."
            },
            {
                "name": "limit",
                "paramType": "query",
                "required": false,
                "type": "integer",
                "defaultValue": "100",
                "description": "The maximum number of stories to be returned. Used only for paginating through the result set. Maximum value allowed: `1000`. Used only for paginating through the result set. This parameter is ignored if `returnTimestampsAndStories` is set to false"
            },
            {
                "enum": [
                    "true",
                    "false"
                ],
                "name": "returnUserRoles",
                "defaultValue": "true",
                "required": false,
                "type": "boolean",
                "paramType": "query",
                "description": "Indicates whether the information about user roles should be fetched from the permissions service and returned in the response."
            }
        ],
        "notes": "Gets a specific room information.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "The room does not exist",
                "code": 404
            }
        ],
        "summary": "Get a specific room information.",
        "outputFields": [
            {
                "name": "roomId",
                "description": "The ID of the room"
            },
            {
                "name": "orgId",
                "description": "The ID of the org that the room belongs to"
            },
            {
                "name": "roomName",
                "description": "The name of the room"
            },
            {
                "name": "roomType",
                "description": "The room type"
            },
            {
                "name": "topic",
                "description": "The topic of the room"
            },
            {
                "name": "lastReadTimestamp",
                "description": "Timestamp of the last time the user accessed the room"
            },
            {
                "name": "recentTimestamp",
                "description": "Timestamp of the latest activity in the room for sorting purposes"
            },
            {
                "name": "isFavorite",
                "description": "Indicates whether the user marked the room as favorite or not"
            },
            {
                "name": "isReadOnly",
                "description": "Indicates whether the room is archived or not"
            },
            {
                "name": "isHidden",
                "description": "Indicates whether the room marked as hidden/archived or not"
            },
            {
                "name": "role",
                "description": "Indicates a role of the user in the particular room"
            },
            {
                "name": "users.userId",
                "description": "The ID of the user"
            },
            {
                "name": "users.orgId",
                "description": "The ID of the org that the user is subscribed with"
            },
            {
                "name": "users.role",
                "description": "The role of the user. Returned only if returnUserRoles is set"
            },
            {
                "name": "stories.stories.storyId",
                "description": "Story ID"
            },
            {
                "name": "stories.stories.created",
                "description": "Indicates when the message was created"
            },
            {
                "name": "stories.stories.updated",
                "description": "Indicates when the message was updated"
            },
            {
                "name": "stories.stories.userId",
                "description": "ID of a user who posted the message"
            },
            {
                "name": "stories.stories.message",
                "description": "Message"
            },
            {
                "name": "stories.stories.isSystemStory",
                "description": "Flag indicates whether the message is system"
            },
            {
                "name": "stories.cursor",
                "description": "Current position of a cursor"
            },
            {
                "name": "stories.total",
                "description": "Total number of messages"
            }
        ],
        "scope": "Gets the rooms for the current user and organization",
        "nickname": "messagesRoom",
        "method": "GET"
    },
    "/api/profiles/v2/search/jobs.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "name": "q",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "The search query. At least one of the `q`, `title`, `skill` parameters should be specified."
            },
            {
                "name": "title",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "Searches for the title of the job's profile. At least one of the `q`, `title`, `skill` parameters should be specified."
            },
            {
                "name": "skills",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "Searches for skills in the job's profile. At least one of the `q`, `title`, `skill` parameters should be specified."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "category2",
                "description": "The category (V2) of the freelancer's profile. Use Metadata resource to get it. You can get it via Metadata Category (v2) resource."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "subcategory2",
                "description": "The subcategory of the job according to the list of Categories 2.0. Example: `Web & Mobile Development`. You can get it via Metadata Category (v2) resource."
            },
            {
                "enum": [
                    "hourly",
                    "fixed"
                ],
                "name": "job_type",
                "paramType": "query",
                "required": false,
                "type": "string",
                "description": "The type of the Job."
            },
            {
                "enum": [
                    "week",
                    "month",
                    "semester",
                    "ongoing"
                ],
                "name": "duration",
                "paramType": "query",
                "required": false,
                "type": "string",
                "description": "The duration of the job."
            },
            {
                "enum": [
                    "as_needed",
                    "part_time",
                    "full_time"
                ],
                "name": "workload",
                "paramType": "query",
                "required": false,
                "type": "string",
                "description": "Indicates the workload for the job."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "client_feedback",
                "description": "A number or range used to filter the search by jobs posted by clients with a rating equal to, more or less than, or within the values provided. If the value is `None`, then jobs from clients without rating are returned. Single parameters such as `1` or `2,3` are valid (comma separated values result in `OR` queries). Ranges such as `[2 TO 4]` are also valid. Examples: `5.0` - the rating is equal to 5.0; `1-5` - the rating is so that 1 <= n <= 5; `1-` - the rating is >=1; `-5` - the rating is <= 5."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "client_hires",
                "description": "A number or range used to filter the search by clients with a number of past hires equal to, more or less than, or within the values provided. Single parameters such as `1` or `2,3` are valid (comma-separated values result in `OR` queries). Ranges such as `[10 TO 20]` are also valid. Examples: `5` - the number of past hires is to 5; `0-10`: number of past hires is 0 <= n <= 10; `10-` - the number of past hires is >=10; `-5` - the number of past hires is <= 5."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "budget",
                "description": "A number or range used to filter the search by jobs having a budget equal to, more or less than, or within the values provided. For example: `[100 TO 1000]` - the budget is between 100 and 1000; `1000` - the budget is equal to 1000. `500-1000` - the budget `b` is 500 <= b <= 1000, `1000-` - the budget is >=1000; `-200` - the budget is <= 200."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "integer",
                "name": "days_posted",
                "description": "Number of days since the job was posted."
            },
            {
                "name": "paging",
                "paramType": "query",
                "required": false,
                "type": "string",
                "defaultValue": "0;10",
                "description": "Pagination, formed as `$offset;$count`. Page size is restricted to be <= 100. Example: page=20;10."
            },
            {
                "enum": [
                    "create_time desc",
                    "client_rating desc",
                    "client_total_charge desc",
                    "client_total_hours desc",
                    "duration desc",
                    "workload desc",
                    "create_time asc",
                    "client_rating asc",
                    "client_total_charge asc",
                    "client_total_hours asc",
                    "duration asc",
                    "workload asc"
                ],
                "name": "sort",
                "defaultValue": "create_time desc",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "Sorts the search results by the value provided. Example: `sort=create_time%20desc`."
            }
        ],
        "notes": "The search parameters mirror the options available on the site plus options to configure the format of your results.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Bad Request - missing parameter",
                "code": 400
            }
        ],
        "summary": "Search for any public job on Upwork.",
        "outputFields": [
            {
                "name": "jobs.id",
                "description": "Job ID, format is: ~01xxxxx"
            },
            {
                "name": "jobs.title",
                "description": "Job title"
            },
            {
                "name": "jobs.snippet",
                "description": "Short job description"
            },
            {
                "name": "jobs.skills",
                "description": "List of required skills"
            },
            {
                "name": "jobs.category2",
                "description": "Related category (new name)"
            },
            {
                "name": "jobs.subcategory2",
                "description": "Related subcategory (new name)"
            },
            {
                "name": "jobs.job_type",
                "description": "Job type. Can be either 'hourly' or 'fixed price'"
            },
            {
                "name": "jobs.budget",
                "description": "Job's budget"
            },
            {
                "name": "jobs.duration",
                "description": "Job duration"
            },
            {
                "name": "jobs.workload",
                "description": "Workload for the job"
            },
            {
                "name": "jobs.job_status",
                "description": "Current status of the job. It can be 'open', 'completed', 'cancelled'"
            },
            {
                "name": "jobs.url",
                "description": "Job url"
            },
            {
                "name": "jobs.date_created",
                "description": "Date job was created"
            },
            {
                "name": "jobs.is_local",
                "description": "The flag indicates if the job is local"
            },
            {
                "name": "jobs.work_type",
                "description": "Work type"
            },
            {
                "name": "jobs.locations",
                "description": "Locations for the local job"
            },
            {
                "name": "jobs.client.country",
                "description": "Client's country"
            },
            {
                "name": "jobs.client.feedback",
                "description": "Feedback score"
            },
            {
                "name": "jobs.client.reviews_count",
                "description": "Number of reviews"
            },
            {
                "name": "jobs.client.jobs_posted",
                "description": "Total number of jobs posted by the client"
            },
            {
                "name": "jobs.client.past_hires",
                "description": "Total number of hires made by the client in the past"
            },
            {
                "name": "jobs.client.payment_verification_status",
                "description": "Payment verification status"
            }
        ],
        "scope": "Read and search profiles of contractors and jobs, and get lists of public metadata",
        "nickname": "searchJobs",
        "method": "GET"
    },
    "/gds/timereports/v1/companies/{company_id}/teams/{team_id}/hours:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_id",
                "description": "The company ID. Use Companies & Teams resource to get it."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "team_id",
                "description": "The team ID. Use Companies & Teams resource to get it."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tq",
                "description": "The Google query. This should be the valid expression in Upwork Google Data Source Language. Fields that cannot appear in the query: `team_id`, `team_name`, `charges`, `charges_online`, `charges_offline`. Example: `tq=SELECT worked_on, provider_id, provider_name, sum(hours) WHERE worked_on >= '2009-10-01' AND worked_on <= '2009-10-31'`."
            },
            {
                "enum": [
                    "out:xml",
                    "out:json",
                    "out:csv"
                ],
                "name": "tqx",
                "defaultValue": "out:json",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The return format. It can be in either XML, JSON or CSV formatting. JSON is returned by default. Example: `tqx=out:xml`."
            }
        ],
        "notes": "This call generates time report for a team without detailed monetary information (charges, etc.), only information about hours. Note that if the `provider_id` field is present in the query, the caller must be a supervisor of the freelancers. If the `provider_id` is not provided in the query, the caller must have either hiring manager or finance permission to the specified team.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Access denied (user has not enough team/company permissions)",
                "code": 200
            },
            {
                "message": "Invalid query",
                "code": 200
            },
            {
                "message": "Other (in case of CUSTOM_ERROR exception)",
                "code": 200
            }
        ],
        "summary": "Get time reports for a team (hours only).",
        "scope": "Generate time and financial reports for your companies and teams",
        "nickname": "getTimeReportTeamHourly",
        "method": "GET"
    },
    "/api/profiles/v1/providers/{profile_key}/brief.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "profile_key",
                "description": "The freelancer's profile key or a list of keys, separated by semicolon (';'). The number of keys per request is limited to 20."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Request Entity Too Large",
                "code": 413
            }
        ],
        "summary": "This call returns an abbreviated list of details about the freelancer\u2019s profile.",
        "scope": "Read and search profiles of contractors and jobs, and get lists of public metadata",
        "nickname": "getFreelancerProfileByKeyBrief",
        "method": "GET"
    },
    "/api/profiles/v1/metadata/categories.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "Returns a list of categories for a job/freelancer profile.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Bad request",
                "code": 400
            }
        ],
        "summary": "List categories.",
        "scope": "Read and search profiles of contractors and jobs, and get lists of public metadata",
        "nickname": "listMetadataCategories",
        "method": "GET"
    },
    "/api/hr/v3/fp/milestones/{milestone_id}/submissions.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "name": "milestone_id",
                "allowMultiple": false,
                "required": true,
                "type": "integer",
                "paramType": "path",
                "description": "Milestone reference."
            }
        ],
        "notes": "This API call allows a Hiring Manager to get all submissions for specific milestone. Note that the user must be authorized in Upwork and must be a Hiring Manager in the team to be able to access the data.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "No recruiter or hiring manager permissions",
                "code": 403
            },
            {
                "message": "No access to team/company",
                "code": 403
            }
        ],
        "summary": "This call gets all submissions for specific milestone.",
        "outputFields": [
            {
                "name": "id",
                "description": "Submission reference"
            },
            {
                "name": "milestone_id",
                "description": "Milestone reference"
            },
            {
                "name": "note2client",
                "description": "Notes from freelancer to client about work that was done"
            },
            {
                "name": "created_date",
                "description": "Date of creation"
            },
            {
                "name": "amount",
                "description": "Amount of money to be paid"
            }
        ],
        "scope": "View milestones and submissions on your behalf",
        "nickname": "getAllSubmissionsForMilestone",
        "method": "GET"
    },
    "/api/profiles/v1/metadata/reasons.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "enum": [
                    "EmployerEndsNoStartContract",
                    "CloseOpening",
                    "RejectCandidate",
                    "RejectInterviewInvite",
                    "CancelCandidacy",
                    "EndProviderContract",
                    "EndCustomerContract",
                    "EndAssignment"
                ],
                "name": "type",
                "paramType": "query",
                "required": true,
                "type": "string",
                "description": "The reason type."
            }
        ],
        "notes": "Returns a list of reasons by specified type.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Bad request",
                "code": 400
            }
        ],
        "summary": "List reasons.",
        "scope": "Read and search profiles of contractors and jobs, and get lists of public metadata",
        "nickname": "listMetadataReasons",
        "method": "GET"
    },
    "/api/hr/v4/clients/applications/{application_id}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "application_id",
                "description": "The job application ID."
            },
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "integer",
                "name": "buyer_team__reference",
                "description": "The reference ID of the client's team. It allows getting applications for a specific team. Example: `34567`. Use 'List Teams' API call to get it."
            }
        ],
        "notes": "This call retrieves details about a specific job application received by a client.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "Internal Server Error",
                "code": 500
            }
        ],
        "summary": "Get specific job application as a client.",
        "outputFields": [
            {
                "name": "applicationUid",
                "description": "Application ID"
            },
            {
                "name": "openingUid",
                "description": "Job UID"
            },
            {
                "name": "profileUid",
                "description": "Profile UID"
            },
            {
                "name": "status",
                "description": "Current status of the job application"
            },
            {
                "name": "createdTs",
                "description": "Timestamp when the job application was created"
            },
            {
                "name": "modifiedTs",
                "description": "Timestamp when the job application was last updated"
            },
            {
                "name": "coverLetter",
                "description": "Text of cover letter"
            },
            {
                "name": "questionsAnswers.question",
                "description": "A client's question"
            },
            {
                "name": "questionsAnswers.answer",
                "description": "A freelancer's answer"
            },
            {
                "name": "hourlyChargeRate.currencyCode",
                "description": "Currency"
            },
            {
                "name": "hourlyChargeRate.amount",
                "description": "The amount charged"
            },
            {
                "name": "fixedChargeAmount.currencyCode",
                "description": "Currency"
            },
            {
                "name": "fixedChargeAmount.amount",
                "description": "The amount charged"
            },
            {
                "name": "recommended",
                "description": "Flag to indicate if the application is recommended"
            },
            {
                "name": "hidden",
                "description": "Flag to indicate if the application is hidden"
            },
            {
                "name": "shortlisted",
                "description": "Flag to indicate if the application is shortlisted"
            },
            {
                "name": "read",
                "description": "Flag to indicate if the application has been read"
            },
            {
                "name": "vendorOrgUid",
                "description": "The UID of the organization to which the applied person belongs"
            },
            {
                "name": "hiddenByBuyer",
                "description": "Flag to indicate if the application is hidden by a client"
            },
            {
                "name": "attachments.link",
                "description": "Link to an attachment"
            },
            {
                "name": "attachments.name",
                "description": "Name"
            },
            {
                "name": "attachments.size",
                "description": "Size"
            },
            {
                "name": "applyingAs",
                "description": "Context under which the job application was made: \"freelancer\" or \"agency\""
            },
            {
                "name": "ciphertext",
                "description": "Profile key linked with the proper profileUid"
            },
            {
                "name": "openingCiphertext",
                "description": "Job key linked with the proper openingUid"
            }
        ],
        "nickname": "getClientJobApplication",
        "method": "GET"
    },
    "/api/messages/v3/{company_user_id}/rooms/applications/{application_id}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_user_id",
                "description": "The company ID or team ID, or user ID. Use 'List companies' or 'List teams' API calls to get the team/company IDs."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "integer",
                "name": "application_id",
                "description": "The UID of the application to retrieve the room for. You can get it from `cj_job_application_uid` in Engagements API."
            },
            {
                "name": "format",
                "paramType": "path",
                "required": false,
                "type": "string",
                "defaultValue": "json",
                "description": "Response format."
            },
            {
                "enum": [
                    "true",
                    "false"
                ],
                "name": "onlyRoomId",
                "defaultValue": "false",
                "required": false,
                "type": "boolean",
                "paramType": "query",
                "description": "Indicates whether or not to return only the ID of the matching room."
            }
        ],
        "notes": "Gets the room information for the interview room with the applicationId passed on the URL.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "The room does not exist",
                "code": 404
            }
        ],
        "summary": "Get a specific room by application ID.",
        "outputFields": [
            {
                "name": "roomId",
                "description": "The ID of the room"
            },
            {
                "name": "orgId",
                "description": "The ID of the org that the room belongs to"
            },
            {
                "name": "roomName",
                "description": "The name of the room"
            },
            {
                "name": "roomType",
                "description": "The room type"
            },
            {
                "name": "topic",
                "description": "The topic of the room"
            },
            {
                "name": "lastReadTimestamp",
                "description": "Timestamp of the last time the user accessed the room"
            },
            {
                "name": "recentTimestamp",
                "description": "Timestamp of the latest activity in the room for sorting purposes"
            },
            {
                "name": "isFavorite",
                "description": "Indicates whether the user marked the room as favorite or not"
            },
            {
                "name": "isReadOnly",
                "description": "Indicates whether the room is archived or not"
            },
            {
                "name": "isHidden",
                "description": "Indicates whether the room marked as hidden/archived or not"
            },
            {
                "name": "role",
                "description": "Indicates a role of the user in the particular room"
            },
            {
                "name": "users.userId",
                "description": "The ID of the user"
            },
            {
                "name": "users.orgId",
                "description": "The ID of the org that the user is subscribed with"
            },
            {
                "name": "users.role",
                "description": "The role of the user. Returned only if returnUserRoles is set"
            },
            {
                "name": "stories.stories.storyId",
                "description": "Story ID"
            },
            {
                "name": "stories.stories.created",
                "description": "Indicates when the message was created"
            },
            {
                "name": "stories.stories.updated",
                "description": "Indicates when the message was updated"
            },
            {
                "name": "stories.stories.userId",
                "description": "ID of a user who posted the message"
            },
            {
                "name": "stories.stories.message",
                "description": "Message"
            },
            {
                "name": "stories.stories.isSystemStory",
                "description": "Flag indicates whether the message is system"
            },
            {
                "name": "stories.cursor",
                "description": "Current position of a cursor"
            },
            {
                "name": "stories.total",
                "description": "Total number of messages"
            }
        ],
        "scope": "Gets the rooms for the current user and organization",
        "nickname": "messagesRoomByApplicationId",
        "method": "GET"
    },
    "/api/team/v3/workdiaries/companies/{company_id}/{date}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_id",
                "description": "The company ID or team ID. Use 'List companies' or 'List teams' API calls to get the IDs."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "date",
                "description": "The target date in `yyyymmdd` format. If absent, it defaults to today."
            },
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "enum": [
                    "recency",
                    "freelancer",
                    "duration"
                ],
                "name": "sort_by",
                "defaultValue": "recency",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "A type of sort."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "activity",
                "description": "Activity filter. Accepts activity ID or 'unassigned'."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "freelancer",
                "description": "Freelancer filter. Accepts frelancer ID."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "paging",
                "description": "Pager. Accepts a semicolon separated numbers 'fromInclusive;toExclusive'."
            }
        ],
        "notes": "The Work Diary method retrieves all snapshots from a single user account within a single day. Keep in mind that a day is dependent on server time and not the day in which the query is made. Make sure to test with various locations before you're done. If task ID is empty, the endpoint will group the data by contract and memo, otherwise by task ID.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden (user is not invited to specified company)",
                "code": 403
            }
        ],
        "summary": "Get workdiary by Company.",
        "outputFields": [
            {
                "name": "total",
                "description": "Total number of records"
            },
            {
                "name": "contracts.user_id",
                "description": "User ID"
            },
            {
                "name": "contracts.contract_title",
                "description": "Contract title"
            },
            {
                "name": "users.name",
                "description": "User name"
            },
            {
                "name": "users.portrait_url",
                "description": "Portrait URL"
            },
            {
                "name": "snapshots.task.id",
                "description": "ID"
            },
            {
                "name": "snapshots.task.code",
                "description": "Code"
            },
            {
                "name": "snapshots.task.description",
                "description": "Description"
            },
            {
                "name": "snapshots.task.memo",
                "description": "Memo"
            },
            {
                "name": "snapshots.contract_id",
                "description": "Contract ID"
            },
            {
                "name": "snapshots.duration",
                "description": "Duration"
            },
            {
                "name": "snapshots.duration_int",
                "description": "Durarion (in minutes)"
            },
            {
                "name": "snapshots.user_id",
                "description": "User ID"
            },
            {
                "name": "snapshots.time.tracked_time",
                "description": "Tracked time"
            },
            {
                "name": "snapshots.time.manual_time",
                "description": "Manual time"
            },
            {
                "name": "snapshots.time.overtime",
                "description": "Overtime"
            },
            {
                "name": "snapshots.time.first_worked",
                "description": "First worked time"
            },
            {
                "name": "snapshots.time.last_worked",
                "description": "Last worked time"
            },
            {
                "name": "snapshots.time.first_worked_int",
                "description": "First worked timestamp"
            },
            {
                "name": "snapshots.time.last_worked_int",
                "description": "Last worked timestamp"
            },
            {
                "name": "snapshots.time.last_screenshot",
                "description": "Last screenshot"
            },
            {
                "name": "snapshots.screenshots",
                "description": "List of screenshots"
            },
            {
                "name": "snapshots.snapshot_api",
                "description": "Link to snapshot API"
            },
            {
                "name": "snapshots.last_worked_snapshot_api",
                "description": "Link to snapshots API with the last worked snapshot"
            }
        ],
        "scope": "View your workdiary",
        "nickname": "getWorkdiaryByCompany",
        "method": "GET"
    },
    "/api/hr/v3/fp/milestones/statuses/active/contracts/{contract_reference}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "name": "contract_reference",
                "allowMultiple": false,
                "required": true,
                "type": "integer",
                "paramType": "path",
                "description": "Contract reference. Contracts info are available in the Engagements API."
            }
        ],
        "notes": "This API call allows a Hiring Manager to get an active milestone of a specific contract. Note that the user must be authorized in Upwork and must be a Hiring Manager in the team to be able to access the data.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "No recruiter or hiring manager permissions",
                "code": 403
            },
            {
                "message": "No access to team/company",
                "code": 403
            }
        ],
        "summary": "This call gets an active milestone of specific contract.",
        "outputFields": [
            {
                "name": "contract_id",
                "description": "Contract reference"
            },
            {
                "name": "id",
                "description": "Milestone ID"
            },
            {
                "name": "description",
                "description": "Name of the milestone"
            },
            {
                "name": "deposit_amount",
                "description": "Amount to deposit for this milestone"
            },
            {
                "name": "due_date",
                "description": "Expected date of finalization"
            }
        ],
        "scope": "View milestones and submissions on your behalf",
        "nickname": "getActiveMilestone",
        "method": "GET"
    },
    "/api/hr/v2/jobs/{job_key}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "job_key",
                "description": "Job key. For example: `~0150f0d859bb3453d0`."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "This call returns the complete job object by job key. It's only available for users with `manage_recruiting` permissions within the team that the job is posted in.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden (operation is unauthorized)",
                "code": 403
            },
            {
                "message": "Bad request (wrongly requested data)",
                "code": 400
            }
        ],
        "summary": "Get job by key.",
        "outputFields": [
            {
                "name": "created_by_name",
                "description": "Hiring Manager name"
            },
            {
                "name": "visibility",
                "description": "Job visibility (public or auth)"
            },
            {
                "name": "skills",
                "description": "Comma separated list of skills in the job"
            },
            {
                "name": "keep_open_on_hire",
                "description": "Keep open the job once someone is hired for it"
            },
            {
                "name": "category2",
                "description": "The job category (V2)"
            },
            {
                "name": "attachment_file_url",
                "description": "URL of the attachment uploaded along with the job"
            },
            {
                "name": "buyer_company__reference",
                "description": "Client's company ID"
            },
            {
                "name": "buyer_team__reference",
                "description": "Client's team ID"
            },
            {
                "name": "created_time",
                "description": "Date job was created"
            },
            {
                "name": "duration",
                "description": "The intended duration of the job"
            },
            {
                "name": "description",
                "description": "The job description"
            },
            {
                "name": "buyer_company__name",
                "description": "Client's company name"
            },
            {
                "name": "subcategory2",
                "description": "Subcategory (V2) of the job"
            },
            {
                "name": "job_type",
                "description": "Hourly or fixed price job type"
            },
            {
                "name": "end_date",
                "description": "The intended end date of the job"
            },
            {
                "name": "title",
                "description": "Job title"
            },
            {
                "name": "status",
                "description": "Job status. Values can be: open, filled, cancelled"
            },
            {
                "name": "budget",
                "description": "The intended budget of the job"
            },
            {
                "name": "public_url",
                "description": "The url to the job's public profile"
            },
            {
                "name": "range_num_candidates",
                "description": "The number of candidates that applied to this job. This is a range, not an absolute number"
            },
            {
                "name": "filled_date",
                "description": "The date that the job is filled"
            },
            {
                "name": "start_date",
                "description": "The intended start date of the job"
            },
            {
                "name": "buyer_team__name",
                "description": "The team name"
            },
            {
                "name": "cancelled_date",
                "description": "Date job was cancelled"
            },
            {
                "name": "preference_candidate_type",
                "description": "Preferred candidate type (IC/AC)"
            },
            {
                "name": "category_uid",
                "description": "The category (V2) reference"
            },
            {
                "name": "nbr_freelancers_to_hire",
                "description": "The number of freelancers to hire"
            }
        ],
        "scope": "View your job posts",
        "nickname": "getJobByKey",
        "method": "GET"
    },
    "/api/team/v2/snapshots/contracts/{contract_id}/{timestamp}.{format}:DELETE": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "contract_id",
                "description": "The contract ID."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "username",
                "description": "The username of the target user account."
            },
            {
                "paramType": "path",
                "required": false,
                "type": "string",
                "name": "timestamp",
                "description": "The timestamp either in UTC according to ISO 8601 (yyyymmddTHHMMSSZ) or as a UNIX timestamp (number of seconds after epoch). If absent, it defaults to the current time. More than one timestamps can be specified either as a range or as a list of values. For timestamp range use the comma character (','). Example: `20081205T090351Z,20081205T091853Z`. For list of timestamps, use the semicolon character (';'), example: `20081205T090351Z;20081405T090851Z;20081705T091853Z`."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "One or several snapshots can be deleted, see the `timestamp` parameters description.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden (user is not invited to specified company)",
                "code": 403
            }
        ],
        "summary": "Delete snapshot by Contract.",
        "scope": "Modify your workdiary",
        "nickname": "deleteSnapshotByContract",
        "method": "DELETE"
    },
    "/api/team/v3/snapshots/contracts/{contract_id}/{timestamp}.{format}:PUT": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "contract_id",
                "description": "The contract ID."
            },
            {
                "paramType": "path",
                "required": false,
                "type": "string",
                "name": "timestamp",
                "description": "The timestamp as a UNIX timestamp (number of seconds after epoch)."
            },
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "memo",
                "description": "The Memo of the snapshot."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "task",
                "description": "The task ID."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "task_desc",
                "description": "The task description."
            }
        ],
        "notes": "Updates a spefic snapshot.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "Update snapshot memo.",
        "scope": "Modify your workdiary",
        "nickname": "updateSnapshot",
        "method": "PUT"
    },
    "/api/hr/v3/clients/applications/{application_id}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "application_id",
                "description": "The job application ID."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "name": "buyer_team__reference",
                "allowMultiple": false,
                "required": true,
                "type": "string",
                "paramType": "query",
                "description": "The reference ID of the client's team. It allows getting applications for a specific team. Example: `34567`. Use 'List Teams' API call to get it."
            }
        ],
        "notes": "This call retrieves details about a specific job application received by a client.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "No recruiter or hiring manager permissions",
                "code": 403
            },
            {
                "message": "No access to team/company",
                "code": 403
            }
        ],
        "summary": "Get specific job application as a client.",
        "outputFields": [
            {
                "name": "rid",
                "description": "Record ID"
            },
            {
                "name": "created_type",
                "description": "Which side creates the application. Values can be: buyer (which means client) or provider (which means contractor)"
            },
            {
                "name": "is_shortlisted",
                "description": "If job is shortlisted"
            },
            {
                "name": "job__reference",
                "description": "The reference id of the job that the application is for"
            },
            {
                "name": "is_hidden",
                "description": "Indicates whether the job is hidden"
            },
            {
                "name": "status",
                "description": "Candidacy status"
            },
            {
                "name": "is_viewed",
                "description": "If application was viewed by current user (client or contractor)"
            },
            {
                "name": "interview_status",
                "description": "The interview status of the candidacy. The values can be: in_process, waiting_for_provider, waiting_for_buyer or none"
            },
            {
                "name": "is_undecided",
                "description": "Whether the application is hidden by client or shortlisted"
            },
            {
                "name": "is_auto_hidden",
                "description": "The flag for auto hidden option"
            },
            {
                "name": "job_type",
                "description": "Job type of the job in the application"
            },
            {
                "name": "hr_charge_rate",
                "description": "Hourly charge rate"
            },
            {
                "name": "job_pref_matches.prefs_total",
                "description": "Total matches"
            },
            {
                "name": "job_pref_matches.prefs_match",
                "description": "Matched preferences"
            },
            {
                "name": "ui_opening_title",
                "description": "Job title"
            },
            {
                "name": "contractor_name",
                "description": "Contractor's name"
            },
            {
                "name": "contractor_ref",
                "description": "The id of the contractor that the offer is for"
            },
            {
                "name": "contractor_title",
                "description": "Contractor's title"
            },
            {
                "name": "offer_status",
                "description": "Offer's status"
            },
            {
                "name": "fp_amount_agreed",
                "description": "Aggreed charge amount for fixed-price offer"
            },
            {
                "name": "invite_letter",
                "description": "Message provided by client in the invitation"
            },
            {
                "name": "is_hidden_by_buyer",
                "description": "Is the job hidden by buyer"
            },
            {
                "name": "is_hidden_by_provider",
                "description": "Is the job hidden by provider"
            },
            {
                "name": "is_seen_by_buyer",
                "description": "If offer was viewed by current user (client or contractor)"
            },
            {
                "name": "opening_ciphertext",
                "description": "The key of the job that the offer is for"
            },
            {
                "name": "cover_letter",
                "description": "A message from provider"
            },
            {
                "name": "feedback_score",
                "description": "Feedback score for provider"
            },
            {
                "name": "contractor_portrait_url",
                "description": "Contractor's portrait URL"
            },
            {
                "name": "total_hours",
                "description": "The total amount of provider's hours"
            },
            {
                "name": "ctime_epoch",
                "description": "Time of creation"
            },
            {
                "name": "hr_pay_rate",
                "description": "Hourly pay rate"
            },
            {
                "name": "fp_pay_amount",
                "description": "Agreed pay amount for fixed-price job"
            },
            {
                "name": "fp_upfront_payment",
                "description": "Upfront payment for fixed-price job"
            },
            {
                "name": "engagement_duration_ref",
                "description": "Engagement duration reference"
            },
            {
                "name": "job__description",
                "description": "Job description"
            },
            {
                "name": "team_nid",
                "description": "Team ID"
            },
            {
                "name": "contractor_ciphertext",
                "description": "Contractor's ciphertext"
            },
            {
                "name": "question_answer",
                "description": "Question/answer history"
            },
            {
                "name": "is_recommended",
                "description": "The flag identifies the possible recommendation"
            },
            {
                "name": "client.company_ref",
                "description": "Company reference"
            },
            {
                "name": "client.company_name",
                "description": "Company name"
            }
        ],
        "scope": "View your job applications",
        "nickname": "getClientJobApplication",
        "method": "GET"
    },
    "/gds/finreports/v2/buyer_companies/{buyer_company_ref}/billings:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "buyer_company_ref",
                "description": "The reference ID of the company the authenticated user has access to. The authenticated user must be the owner of the company. Use Companies & Teams resource to get it."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tq",
                "description": "The Google query. This should be the valid expression in Upwork Google Data Source Language. Example: `tq=SELECT amount WHERE date >= '2009-10-01' AND date <= '2009-10-31'`."
            },
            {
                "enum": [
                    "out:xml",
                    "out:json",
                    "out:csv"
                ],
                "name": "tqx",
                "defaultValue": "out:json",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The return format. It can be in either XML, JSON or CSV formatting. JSON is returned by default. Example: `tqx=out:xml`."
            }
        ],
        "notes": "This call allows company owners to see what their freelancers get paid. Disallowed fields: none. Supported filters: `date`, `week`, `month`, `year`, `date_due`, `provider_company__reference`, `provider_company__id`, `provider__reference`, `provider__id`, `assignment__reference`, `type`, `subtype`. Permissions: owner or admin.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "User has not enough permissions",
                "code": 200
            },
            {
                "message": "Invalid query",
                "code": 200
            },
            {
                "message": "Other (in case of CUSTOM_ERROR exception)",
                "code": 200
            }
        ],
        "summary": "Get billing reports for a client's company.",
        "scope": "Generate time and financial reports for your companies and teams",
        "nickname": "getBillingsReportClientCompany",
        "method": "GET"
    },
    "/api/hr/v2/engagements.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "buyer_team__reference",
                "description": "The reference ID of the client's team. Example: `34567`. Use 'List teams' API call to get it."
            },
            {
                "enum": [
                    "0",
                    "1"
                ],
                "name": "include_sub_teams",
                "paramType": "query",
                "required": false,
                "type": "integer",
                "description": "If set to `1`: the response includes info about sub teams."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "provider__reference",
                "description": "The freelancer's reference ID. Example: `1234`."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "profile_key",
                "description": "The unique profile key. It is used if the `provider_reference` param is absent. Example: `~~677961dcd7f65c01`."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "job__reference",
                "description": "The job reference ID. Use `List jobs` call to get it."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "agency_team__reference",
                "description": "The reference ID of the agency."
            },
            {
                "enum": [
                    "active",
                    "closed"
                ],
                "name": "status",
                "paramType": "query",
                "required": false,
                "type": "string",
                "description": "The current status of the engagement. Multiple statuses can be listed using semicolon. Example: `status=active;closed`."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "created_time_from",
                "description": "Filters by 'from' time. Example: `created_time_from=2008-09-09T00:00:01`."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "created_time_to",
                "description": "Filters by 'to' time. Example: `created_time_to=2009-01-20 11:59:59`."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "page",
                "description": "Pagination, formed as `$offset;$count`. Example: `page=20;10`"
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "order_by",
                "description": "Sorts results in format `$field_name1;$field_name2;..$field_nameN;AD...A`. Here `A` stands for ascending order, `D` - descending order. Valid field names for ordering are: `reference`, `created_time`, `offer__reference`, `job__reference`, `client_team__reference`, `provider__reference`, `status`, `engagement_start_date`, `engagement_end_date`."
            }
        ],
        "notes": "This call returns engagement(s) based on the parameters supplied in the API call.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "List engagements.",
        "outputFields": [
            {
                "name": "engagement_start_ts",
                "description": "Contract's start date and time"
            },
            {
                "name": "engagement_end_ts",
                "description": "Contract's end date and time"
            },
            {
                "name": "provider_company__reference",
                "description": "Related company's reference"
            },
            {
                "name": "provider_team__reference",
                "description": "Related agency's reference"
            },
            {
                "name": "weekly_salary_pay_amount",
                "description": "Weekly salary"
            },
            {
                "name": "hourly_charge_rate",
                "description": "Hourly charge rate"
            },
            {
                "name": "weekly_stipend_hours",
                "description": "Weekly Stipend Hours"
            },
            {
                "name": "provider__id",
                "description": "Username of freelancer"
            },
            {
                "name": "is_paused",
                "description": "Is contract paused"
            },
            {
                "name": "offer_id",
                "description": "Related offer reference"
            },
            {
                "name": "job_application_ref",
                "description": "Related job application reference"
            },
            {
                "name": "cj_job_application_uid",
                "description": "Related job application unique ID"
            },
            {
                "name": "buyer_team__reference",
                "description": "Client's team reference"
            },
            {
                "name": "engagement_end_date",
                "description": "Contract's end date"
            },
            {
                "name": "created_time",
                "description": "Date/time of contract creation"
            },
            {
                "name": "hourly_pay_rate",
                "description": "Pay rate of contractor for hourly contract"
            },
            {
                "name": "engagement_start_date",
                "description": "Contract's start date"
            },
            {
                "name": "buyer_team__id",
                "description": "Client's team id (username)"
            },
            {
                "name": "weekly_salary_charge_amount",
                "description": "Weekly stipend amount"
            },
            {
                "name": "provider_team__id",
                "description": "Client's team company id (username)"
            },
            {
                "name": "status",
                "description": "Contract's status"
            },
            {
                "name": "engagement_title",
                "description": "Contract's title"
            },
            {
                "name": "provider__reference",
                "description": "Contractor's reference id"
            },
            {
                "name": "reference",
                "description": "Reference of engagement"
            },
            {
                "name": "weekly_hours_limit",
                "description": "# of hours contractor can work for per week"
            },
            {
                "name": "engagement_job_type",
                "description": "Job type of the contract"
            },
            {
                "name": "job__title",
                "description": "Job title"
            },
            {
                "name": "provider__name",
                "description": "Contractor name"
            },
            {
                "name": "provider_team__name",
                "description": "Agency team name"
            },
            {
                "name": "buyer_team__name",
                "description": "Client team name"
            },
            {
                "name": "buyer_company__name",
                "description": "Client company name"
            },
            {
                "name": "provider_company__name",
                "description": "Agency company name"
            },
            {
                "name": "is_suspended",
                "description": "Is contract suspended"
            },
            {
                "name": "buyer_company__reference",
                "description": "Client's company reference"
            },
            {
                "name": "fixed_charge_amount_agreed",
                "description": "FP amount agreed, charge"
            },
            {
                "name": "fixed_price_upfront_payment",
                "description": "FP upfront payment percent value"
            },
            {
                "name": "job_ref_ciphertext",
                "description": "Job's profile ID"
            },
            {
                "name": "dev_recno_ciphertext",
                "description": "Contractor's profile ciphertext"
            },
            {
                "name": "portrait_url",
                "description": "Provider's portrait URL"
            },
            {
                "name": "is_autopaused",
                "description": "Indicates if the job is autopaused"
            },
            {
                "name": "category_uid",
                "description": "Offer category UID"
            },
            {
                "name": "category_name",
                "description": "Offer category name"
            },
            {
                "name": "estimated_start_date",
                "description": "Contract's estimated start date"
            },
            {
                "name": "estimated_end_date",
                "description": "Contract's end start date"
            },
            {
                "name": "feedback.feedback_for_buyer.score",
                "description": "Feedback score"
            },
            {
                "name": "feedback.feedback_for_provider.score",
                "description": "Feedback score"
            },
            {
                "name": "active_milestone.sequence_id",
                "description": "Sequence ID"
            },
            {
                "name": "active_milestone.state",
                "description": "Current state. Possible values are: `paid`, `active`, `not funded`"
            },
            {
                "name": "active_milestone.id",
                "description": "Milestone ID"
            },
            {
                "name": "active_milestone.description",
                "description": "Milestone description"
            },
            {
                "name": "active_milestone.deposit_amount",
                "description": "Deposit amount"
            },
            {
                "name": "active_milestone.due_date",
                "description": "Milestone ETA"
            }
        ],
        "scope": "View your contracts",
        "nickname": "hrListEngagements",
        "method": "GET"
    },
    "/api/hr/v3/fp/milestones/{milestone_id}.{format}:PUT": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "name": "milestone_id",
                "allowMultiple": false,
                "required": true,
                "type": "integer",
                "paramType": "path",
                "description": "Milestone reference."
            },
            {
                "name": "milestone_description",
                "allowMultiple": false,
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "Name of the milestone."
            },
            {
                "name": "deposit_amount",
                "allowMultiple": false,
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "Amount to deposit for this milestone."
            },
            {
                "name": "message",
                "allowMultiple": false,
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "Message from the client to the freelancer."
            },
            {
                "name": "due_date",
                "allowMultiple": false,
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "Expected date of finalization. Format mm-dd-yyyy."
            }
        ],
        "notes": "This API call allows a Hiring Manager to edit a milestone. Note that the user must be authorized in Upwork and must be a Hiring Manager in the team to be able to edit the milestone.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "No recruiter or hiring manager permissions",
                "code": 403
            },
            {
                "message": "No access to team/company",
                "code": 403
            },
            {
                "message": "This function cannot be used to first the first milestone",
                "code": 400
            },
            {
                "message": "Only not_funded milestones can be edited",
                "code": 400
            }
        ],
        "summary": "This call modifies an existing milestone.",
        "scope": "Modify milestones and submissions on your behalf",
        "nickname": "putEditMilestone",
        "method": "PUT"
    },
    "/api/profiles/v2/search/providers.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "name": "q",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "The search query. At least one of the `q`, `title`, `skill` parameters should be specified."
            },
            {
                "name": "title",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "Searches for the title in the freelancer's profile. At least one of the `q`, `title`, `skill` parameters should be specified."
            },
            {
                "name": "skills",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "Searches for skills of freelancer's profile. At least one of the `q`, `title`, `skill` parameters should be specified."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "groups",
                "description": "Searches for groups in the freelancer's profile. The freelancer must be a member of the group provided."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "tests",
                "description": "Searches for tests in the freelancer's profile."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "tests_top_10",
                "description": "Searches for freelancers that are in the top 10 of the test."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "tests_top_30",
                "description": "Searches for freelancers that are in the top 30 of the test."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "category2",
                "description": "The category (V2) of the freelancer's profile. Use Metadata resource to get it. You can get it via Metadata Category (v2) resource."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "subcategory2",
                "description": "The subcategory of the job according to the list of Categories 2.0. Example: `Web & Mobile Development`. You can get it via Metadata Category (v2) resource."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "region",
                "description": "Searches for profiles of freelancers who live in the region provided. Valid values are provided by Metadata Regions resource. Example: `Latin America`."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "feedback",
                "description": "Searches for freelancers with specific feedback score. Single values such as `3` or `3,4` (comma-separated values results in OR queries) and ranges such as `[3 TO 4]` are valid."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "rate",
                "description": "A number or range used to filter the search by freelancer's profile rate. Single values such as `20` or `20,30` (comma-separated values result in `OR` queries) and ranges such as `[20 TO 40]` are valid."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "hours",
                "description": "Searches for profiles of freelancers who have worked the number of hours provided. Single values such as `20` or `20,30` (comma-separated values result in `OR` queries) and ranges such as `[20 TO 40]` are valid."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "recent_hours",
                "description": "Searches for profiles of freelancers who have recently worked the number of hours provided. Single values such as `20` or `20,30` (comma-separated values result to `OR` queries) and ranges such as `[20 TO 40]` are valid."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "last_activity",
                "description": "The date of the last time the freelancer worked. The value should be formatted according to ISO 8601 date syntax with hours always set at 00:00:00.000. Example: `2013-01-04T00:00:00.000Z`."
            },
            {
                "enum": [
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "name": "english_skill",
                "paramType": "query",
                "required": false,
                "type": "integer",
                "description": "The freelancer's English skills assessment result."
            },
            {
                "enum": [
                    "0",
                    "1"
                ],
                "name": "is_odesk_ready",
                "paramType": "query",
                "required": false,
                "type": "integer",
                "description": "Defines if the freelancer is Upwork ready or not."
            },
            {
                "enum": [
                    "Agency",
                    "Independent"
                ],
                "name": "profile_type",
                "paramType": "query",
                "required": false,
                "type": "string",
                "description": "The freelancer type."
            },
            {
                "enum": [
                    "0",
                    "1"
                ],
                "name": "include_entities",
                "paramType": "query",
                "required": false,
                "type": "string",
                "description": "If set to `1` the data in the response will only contain a profile IDs array."
            },
            {
                "enum": [
                    "auth",
                    "public"
                ],
                "name": "profile_access",
                "paramType": "query",
                "required": false,
                "type": "string",
                "description": "The access type of the profile."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "nss100",
                "description": "Job success score. Example: value `[0.8 TO *]` returns freelancers with job success score more then 0.8 (80%)."
            },
            {
                "name": "paging",
                "paramType": "query",
                "required": false,
                "type": "string",
                "defaultValue": "0;10",
                "description": "Pagination, formed as `$offset;$count`. Page size is restricted to be <= 50. Example: page=100;30."
            }
        ],
        "notes": "The search parameters include the options available on the site and additional options to configure the format of your results.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            }
        ],
        "summary": "Search for any public freelancers on Upwork.",
        "outputFields": [
            {
                "name": "profiles.id",
                "description": "Contractor ID, format is: ~01xxxxx"
            },
            {
                "name": "profiles.name",
                "description": "Contractor Name"
            },
            {
                "name": "profiles.groups",
                "description": "List of groups to which contractor belongs"
            },
            {
                "name": "profiles.categories2",
                "description": "List of categories (V2) contractor selected"
            },
            {
                "name": "profiles.skills",
                "description": "List of required skills"
            },
            {
                "name": "profiles.feedback",
                "description": "Feedback score"
            },
            {
                "name": "profiles.rate",
                "description": "Contractor's rate"
            },
            {
                "name": "profiles.title",
                "description": "Contractor's title"
            },
            {
                "name": "profiles.country",
                "description": "Contractor's country"
            },
            {
                "name": "profiles.description",
                "description": "Contractor's profile description"
            },
            {
                "name": "profiles.portfolio_items_count",
                "description": "Amount of portfolio items"
            },
            {
                "name": "profiles.portrait_50",
                "description": "Contractor's portrait"
            },
            {
                "name": "profiles.profile_type",
                "description": "Contractor's type. Type can be 'Independent' or 'Agency'"
            },
            {
                "name": "profiles.last_activity",
                "description": "Contractor's last activity"
            },
            {
                "name": "profiles.member_since",
                "description": "Member since"
            },
            {
                "name": "profiles.is_favorite",
                "description": "Favorite flag"
            }
        ],
        "scope": "Read and search profiles of contractors and jobs, and get lists of public metadata",
        "nickname": "searchProviders",
        "method": "GET"
    },
    "/gds/timereports/v1/companies/{company_id}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_id",
                "description": "The company ID. Use Companies & Teams resource to get it."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tq",
                "description": "The Google query. This should be the valid expression in Upwork Google Data Source Language. Fields that cannot appear in the query: `company_id`. Example: `tq=SELECT week_worked_on, assignment_team_id, sum(hours), sum(charges) WHERE worked_on > '2009-10-01' AND worked_on <= '2009-10-31'`."
            },
            {
                "enum": [
                    "out:xml",
                    "out:json",
                    "out:csv"
                ],
                "name": "tqx",
                "defaultValue": "out:json",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The return format. It can be in either XML, JSON or CSV formatting. JSON is returned by default. Example: `tqx=out:xml`."
            }
        ],
        "notes": "Time reports can be generated at company-wide level. In order to access this call the authorized user needs either hiring or finance permissions to all teams within the company.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Access denied (user has not enough team/company permissions)",
                "code": 200
            },
            {
                "message": "Invalid query",
                "code": 200
            },
            {
                "message": "Other (in case of CUSTOM_ERROR exception)",
                "code": 200
            }
        ],
        "summary": "Get company wide reports.",
        "scope": "Generate time and financial reports for your companies and teams",
        "nickname": "getTimeReportCompanyWide",
        "method": "GET"
    },
    "/api/team/v2/snapshots/contracts/{contract_id}/{timestamp}.{format}:PUT": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "contract_id",
                "description": "The contract ID."
            },
            {
                "paramType": "path",
                "required": false,
                "type": "string",
                "name": "timestamp",
                "description": "The timestamp either in UTC according to ISO 8601 (yyyymmddTHHMMSSZ) or as a UNIX timestamp (number of seconds after epoch). If absent, it defaults to the current time. More than one timestamps can be specified either as a range or as a list of values. For timestamp range use the comma character (','). Example: `20081205T090351Z,20081205T091853Z`. For list of timestamps, use the semicolon character (';'), example: `20081205T090351Z;20081405T090851Z;20081705T091853Z`."
            },
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "memo",
                "description": "The Memo of the snapshot."
            }
        ],
        "notes": "Updates snapshot memo by Contract. If the `timestamp` path parameter is not specified, the snapshot for 'now' is updated. Several snapshots can be updated as well, see the `timestamp` parameter description.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden (user is not invited to specified company)",
                "code": 403
            }
        ],
        "summary": "Update snapshot memo by Contract.",
        "scope": "Modify your workdiary",
        "nickname": "updateSnapshotByContract",
        "method": "PUT"
    },
    "/api/otask/v1/tasks/companies/{company_id}/teams/{team_id}/tasks.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_id",
                "description": "The company ID. Use the `parent_team__id` value from the `Get teams` API call."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "team_id",
                "description": "The team ID."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "search",
                "description": "Search term to filter tasks by code and description."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "page",
                "description": "Pagination, formed as `$offset;$count`. Example: `page=50;50`."
            }
        ],
        "notes": "This call returns a flat list (with no company/user description) of all activities under the specified team.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "No access to company",
                "code": 403
            },
            {
                "message": "No access to team",
                "code": 403
            }
        ],
        "summary": "List team activities",
        "scope": "View task codes",
        "nickname": "listTeamTasks",
        "method": "GET"
    },
    "/api/hr/v3/fp/submissions/{submission_id}/approve.{format}:PUT": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "name": "submission_id",
                "allowMultiple": false,
                "required": true,
                "type": "integer",
                "paramType": "path",
                "description": "Submission reference."
            },
            {
                "name": "amount",
                "allowMultiple": false,
                "required": true,
                "type": "integer",
                "paramType": "query",
                "description": "Amount of money to be paid."
            },
            {
                "name": "bonus",
                "allowMultiple": false,
                "required": false,
                "type": "integer",
                "paramType": "query",
                "description": "Amount of money paid as bonus."
            },
            {
                "name": "pay_comments",
                "allowMultiple": false,
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "Comments on payment."
            },
            {
                "enum": [
                    "329",
                    "330",
                    "331",
                    "332"
                ],
                "name": "underpayment_reason",
                "paramType": "query",
                "required": false,
                "type": "string",
                "allowMultiple": false,
                "description": "Reason for a smaller payment than the one agreed. Values description: `329` - Payment lower due to freelancer performance; `330` - Freelancer is performing well, but the scope of work changed; `331` - Freelancer is performing well, but I decided to make an earlier payment; `332` - Payment is lower for other reasons, but freelancer is performing well."
            },
            {
                "name": "note2contractor",
                "allowMultiple": false,
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "Notes from the client to the freelancer."
            }
        ],
        "notes": "This API call allows a Hiring Manager to approve the submission of work to a milestone made by the freelancer. Note that the user must be authorized in Upwork and must be a Hiring Manager in the team to be able to approve a milestone submission.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "No recruiter or hiring manager permissions",
                "code": 403
            },
            {
                "message": "No access to team/company",
                "code": 403
            },
            {
                "message": "Invalid state when approving the milestone: '{state}'",
                "code": 400
            }
        ],
        "summary": "Approve the submission.",
        "scope": "Modify milestones and submissions on your behalf",
        "nickname": "putApproveSubmission",
        "method": "PUT"
    },
    "/api/messages/v3/{company_user_id}/rooms/offers/{offer_id}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_user_id",
                "description": "The company ID or team ID, or user ID. Use 'List companies' or 'List teams' API calls to get the team/company IDs."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "integer",
                "name": "offer_id",
                "description": "The ID of the offer to retrieve the room for."
            },
            {
                "name": "format",
                "paramType": "path",
                "required": false,
                "type": "string",
                "defaultValue": "json",
                "description": "Response format."
            },
            {
                "enum": [
                    "true",
                    "false"
                ],
                "name": "onlyRoomId",
                "defaultValue": "false",
                "required": false,
                "type": "boolean",
                "paramType": "query",
                "description": "Indicates whether or not to return only the ID of the matching room."
            }
        ],
        "notes": "Gets the room information for the interview room with the offerId passed on the URL.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "The room does not exist",
                "code": 404
            }
        ],
        "summary": "Get a specific room by offer ID.",
        "outputFields": [
            {
                "name": "roomId",
                "description": "The ID of the room"
            },
            {
                "name": "orgId",
                "description": "The ID of the org that the room belongs to"
            },
            {
                "name": "roomName",
                "description": "The name of the room"
            },
            {
                "name": "roomType",
                "description": "The room type"
            },
            {
                "name": "topic",
                "description": "The topic of the room"
            },
            {
                "name": "lastReadTimestamp",
                "description": "Timestamp of the last time the user accessed the room"
            },
            {
                "name": "recentTimestamp",
                "description": "Timestamp of the latest activity in the room for sorting purposes"
            },
            {
                "name": "isFavorite",
                "description": "Indicates whether the user marked the room as favorite or not"
            },
            {
                "name": "isReadOnly",
                "description": "Indicates whether the room is archived or not"
            },
            {
                "name": "isHidden",
                "description": "Indicates whether the room marked as hidden/archived or not"
            },
            {
                "name": "role",
                "description": "Indicates a role of the user in the particular room"
            },
            {
                "name": "users.userId",
                "description": "The ID of the user"
            },
            {
                "name": "users.orgId",
                "description": "The ID of the org that the user is subscribed with"
            },
            {
                "name": "users.role",
                "description": "The role of the user. Returned only if returnUserRoles is set"
            },
            {
                "name": "stories.stories.storyId",
                "description": "Story ID"
            },
            {
                "name": "stories.stories.created",
                "description": "Indicates when the message was created"
            },
            {
                "name": "stories.stories.updated",
                "description": "Indicates when the message was updated"
            },
            {
                "name": "stories.stories.userId",
                "description": "ID of a user who posted the message"
            },
            {
                "name": "stories.stories.message",
                "description": "Message"
            },
            {
                "name": "stories.stories.isSystemStory",
                "description": "Flag indicates whether the message is system"
            },
            {
                "name": "stories.cursor",
                "description": "Current position of a cursor"
            },
            {
                "name": "stories.total",
                "description": "Total number of messages"
            }
        ],
        "scope": "Gets the rooms for the current user and organization",
        "nickname": "messagesRoomByOfferId",
        "method": "GET"
    },
    "/api/hr/v3/fp/submissions.{format}:POST": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "name": "milestone_id",
                "allowMultiple": false,
                "required": true,
                "type": "integer",
                "paramType": "query",
                "description": "Milestone reference."
            },
            {
                "name": "note2client",
                "allowMultiple": false,
                "required": true,
                "type": "string",
                "paramType": "query",
                "description": "Notes from freelancer to client about work that was done."
            },
            {
                "name": "amount",
                "allowMultiple": false,
                "required": true,
                "type": "integer",
                "paramType": "query",
                "description": "Amount requested by the freelancer."
            }
        ],
        "notes": "This API call allows a freelancer to submit work to a milestone to be approved by the client. Note that the user must be authorized in Upwork and must be a freelancer of a contract or AM of such freelancer.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "No access to submit approval",
                "code": 403
            }
        ],
        "summary": "Freelancer submits work for the client to approve.",
        "scope": "Modify milestones and submissions on your behalf",
        "nickname": "postApprovalSubmission",
        "method": "POST"
    },
    "/api/team/v2/workdays/companies/{company_id}/{from_date,till_date}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_id",
                "description": "The company ID."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "from_date",
                "description": "The start date in `yyyymmdd` format."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "end_date",
                "description": "The end date in `yyyymmdd` format."
            },
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "enum": [
                    "mine",
                    "user",
                    "gmt"
                ],
                "name": "tz",
                "defaultValue": "mine",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The time zone to use."
            }
        ],
        "notes": "The Workdays method retrieves all work days within a specific period and in a specific company for currently authenticated user. Keep in mind that a day is dependent on server time and not the day in which the query is made. Make sure to test with various locations before you're done.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "Bad Request",
                "code": 400
            }
        ],
        "summary": "Get Workdays by Company.",
        "scope": "View your workdiary",
        "nickname": "getWorkdaysByCompany",
        "method": "GET"
    },
    "/gds/timereports/v1/providers/{user_id}/hours:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "user_id",
                "description": "The freelancer's user ID. This should be the user ID of the authenticated user."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tq",
                "description": "The Google query. This should be the valid expression in Upwork Google Data Source Language. Fields that cannot appear in the query: `provider_id`, `provider_name`, `charges`, `charges_online`, `charges_offline`. Example: `tq=SELECT worked_on, assignment_team_id, hours, task, memo WHERE worked_on > '2009-10-01' AND worked_on <= '2009-10-31'`."
            },
            {
                "enum": [
                    "out:xml",
                    "out:json",
                    "out:csv"
                ],
                "name": "tqx",
                "defaultValue": "out:json",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The return format. It can be in either XML, JSON or CSV formatting. JSON is returned by default. Example: `tqx=out:xml`."
            }
        ],
        "notes": "This call allows callers to generate time reports for themselves. No monetary fields, such as charges, are supported. The caller must be the freelancer himself.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Access denied (user has not enough team/company permissions)",
                "code": 200
            },
            {
                "message": "Invalid query",
                "code": 200
            },
            {
                "message": "Other (in case of CUSTOM_ERROR exception)",
                "code": 200
            }
        ],
        "summary": "Get freelancer specific reports (hours only).",
        "scope": "Generate time and financial reports for your companies and teams",
        "nickname": "getTimeReportProvider",
        "method": "GET"
    },
    "/gds/timereports/v2/companies/{company_id}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_id",
                "description": "The company ID. Use Companies & Teams resource to get it."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tq",
                "description": "The Google query. This should be the valid expression in Upwork Google Data Source Language. Fields that cannot appear in the query: `company_id`. Example: `tq=SELECT week_worked_on, assignment_team_id, sum(hours), sum(charges) WHERE worked_on > '2009-10-01' AND worked_on <= '2009-10-31'`."
            },
            {
                "enum": [
                    "out:xml",
                    "out:json",
                    "out:csv"
                ],
                "name": "tqx",
                "defaultValue": "out:json",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The return format. It can be in either XML, JSON or CSV formatting. JSON is returned by default. Example: `tqx=out:xml`."
            }
        ],
        "notes": "Time reports can be generated at company-wide level. All time reports fields are supported on this level. In order to access this call the authorized user needs either hiring or finance permissions to all teams within the company.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Access denied (user has not enough team/company permissions)",
                "code": 200
            },
            {
                "message": "Invalid query",
                "code": 200
            },
            {
                "message": "Other (in case of CUSTOM_ERROR exception)",
                "code": 200
            }
        ],
        "summary": "Get company wide reports.",
        "scope": "Generate time and financial reports for your companies and teams",
        "nickname": "getTimeReportCompanyWide",
        "method": "GET"
    },
    "/api/hr/v2/companies.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "This call returns all the companies the currently authorized user has access to on Upwork.  It is important to take into account that just because a user has access to a company does not mean he/she has access to all areas of a company. To find out exactly what permissions a user has within a specific company use 'Get roles' API call.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "List companies.",
        "outputFields": [
            {
                "name": "reference",
                "description": "Company reference"
            },
            {
                "name": "owner_ciphertext",
                "description": "Ciphertext of the company owner"
            },
            {
                "name": "name",
                "description": "Company name"
            },
            {
                "name": "payment_verification_status",
                "description": "Payment verified"
            }
        ],
        "scope": "View the structure of your companies/teams",
        "nickname": "hrListCompanies",
        "method": "GET"
    },
    "/api/otask/v1/tasks/companies/{company_id}/teams/{team_id}/engagements/{engagement}/tasks.{format}:PUT": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_id",
                "description": "The company ID. Use the `parent_team__id` value from the 'Get teams' API call."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "team_id",
                "description": "The team ID."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "engagement",
                "description": "Engagement ID that is assigned/unassigned to the given list of activities."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tasks",
                "description": "Activity tracking code or list of codes separated by semicolon (';')."
            }
        ],
        "notes": "Activity appears in freelancer's team client only if his engagement is assigned to the activity and activities are activated for the ongoing contract. This call overrides assigned engagements for the given activities. For example, if you pass empty `task_codes` or just omit this parameter, freelancer's engagement is unassigned from all the activities it is assigned to.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "No access to company",
                "code": 403
            },
            {
                "message": "No access to team",
                "code": 403
            }
        ],
        "summary": "Assign an existing engagement to the list of activities.",
        "scope": "Modify task codes",
        "nickname": "assignEngagementsToActivity",
        "method": "PUT"
    },
    "/api/hr/v2/teams.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "This call returns all the teams that a user has access to. Keep in mind that it returns teams across different companies.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "List teams.",
        "outputFields": [
            {
                "name": "reference",
                "description": "Team reference"
            },
            {
                "name": "id",
                "description": "Team ID"
            },
            {
                "name": "name",
                "description": "Company name"
            },
            {
                "name": "parent_team__id",
                "description": "Parent team ID"
            },
            {
                "name": "company_name",
                "description": "Parent company name"
            },
            {
                "name": "parent_team__name",
                "description": "Parent team name"
            },
            {
                "name": "company__reference",
                "description": "Parent company reference"
            },
            {
                "name": "parent_team__reference",
                "description": "Parent team reference"
            }
        ],
        "scope": "View the structure of your companies/teams",
        "nickname": "hrListTeams",
        "method": "GET"
    },
    "/gds/finreports/v2/buyer_teams/{buyer_team_ref}/billings:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "integer",
                "name": "buyer_team_ref",
                "description": "The reference ID of the team the authenticated user has access to. The authenticated user must be an admin or a staffing manager of the team.\u00a0Use Companies & Teams resource to get it."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tq",
                "description": "The Google query. This should be the valid expression in Upwork Google Data Source Language. Example: `tq=SELECT amount WHERE date >= '2009-10-01' AND date <= '2009-10-31' AND provider__reference = '23423'`."
            },
            {
                "enum": [
                    "out:xml",
                    "out:json",
                    "out:csv"
                ],
                "name": "tqx",
                "defaultValue": "out:json",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The return format. It can be in either XML, JSON or CSV formatting. JSON is returned by default. Example: `tqx=out:xml`."
            }
        ],
        "notes": "This call allows admins or hiring managers of a team to see what their freelancers get paid. Disallowed fields: `comment`, `po_number`. Supported filters: `date`, `week`, `month`, `year`, `date_due`, `provider_team__reference`, `provider_team__id`, `provider__reference`, `provider__id`, `assignment__reference`, `type`, `subtype`. Permissions: admin or hiring.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "User has not enough permissions",
                "code": 200
            },
            {
                "message": "Invalid query",
                "code": 200
            },
            {
                "message": "Other (in case of CUSTOM_ERROR exception)",
                "code": 200
            }
        ],
        "summary": "Get billing reports for a client's team.",
        "scope": "Generate time and financial reports for your companies and teams",
        "nickname": "getBillingReportClientTeam",
        "method": "GET"
    },
    "/gds/finreports/v2/buyer_companies/{buyer_company_ref}/earnings:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "buyer_company_ref",
                "description": "The reference ID of the company the authenticated user has access to. The authenticated user must be the owner of the company. Use Companies & Teams resource to get it."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tq",
                "description": "The Google query. This should be the valid expression in Upwork Google Data Source Language. Example: `tq=SELECT amount WHERE date >= '2009-10-01' AND date <= '2009-10-31' AND provider__id = 'jsmith'`."
            },
            {
                "enum": [
                    "out:xml",
                    "out:json",
                    "out:csv"
                ],
                "name": "tqx",
                "defaultValue": "out:json",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The return format. It can be in either XML, JSON or CSV formatting. JSON is returned by default. Example: `tqx=out:xml`."
            }
        ],
        "notes": "This call allows company owners to see what they pay to their freelancers. Disallowed fields: none. Supported filters: `date`, `week`, `month`, `year`, `date_due`, `provider_company__reference`, `provider_company__id`, `provider__reference`, `provider__id`, `assignment__reference`, `type`, `subtype`, `po_number`. Permissions: owner or admin.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "User has not enough permissions",
                "code": 200
            },
            {
                "message": "Invalid query",
                "code": 200
            },
            {
                "message": "Other (in case of CUSTOM_ERROR exception)",
                "code": 200
            }
        ],
        "summary": "Get earning reports for a client's company.",
        "scope": "Generate time and financial reports for your companies and teams",
        "nickname": "getEarningsReportClientCompany",
        "method": "GET"
    },
    "/api/team/v2/workdays/contracts/{contract_id}/{from_date,till_date}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "contract_id",
                "description": "The contract ID or a list of contract IDs, separated by semicolon (';')."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "from_date",
                "description": "The start date in `yyyymmdd` format."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "end_date",
                "description": "The end date in `yyyymmdd` format."
            },
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "enum": [
                    "mine",
                    "user",
                    "gmt"
                ],
                "name": "tz",
                "defaultValue": "mine",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The time zone to use."
            }
        ],
        "notes": "The Workdays method retrieves all work days within a specific period by contract. Keep in mind that a day is dependent on server time and not the day in which the query is made. Make sure to test with various locations before you're done.'",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "Bad Request",
                "code": 400
            }
        ],
        "summary": "Get Workdays by Contract.",
        "scope": "View your workdiary",
        "nickname": "getWorkdaysByContract",
        "method": "GET"
    },
    "/api/hr/v3/contractors/applications/{application_id}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "application_id",
                "description": "The job application ID."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "This call retrieves details about a specific job application made by a freelancer.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "No access to team/company/job/application",
                "code": 403
            }
        ],
        "summary": "Get specific job application as a freelancer.",
        "outputFields": [
            {
                "name": "rid",
                "description": "Record ID"
            },
            {
                "name": "created_type",
                "description": "Which side creates the application. Values can be: buyer (which means client) or provider (which means contractor)"
            },
            {
                "name": "is_shortlisted",
                "description": "If job is shortlisted"
            },
            {
                "name": "job__reference",
                "description": "The reference id of the job that the application is for"
            },
            {
                "name": "is_hidden",
                "description": "Indicates whether the job is hidden"
            },
            {
                "name": "status",
                "description": "Candidacy status"
            },
            {
                "name": "is_viewed",
                "description": "If application was viewed by current user (client or contractor)"
            },
            {
                "name": "interview_status",
                "description": "The interview status of the candidacy. The values can be: in_process, waiting_for_provider, waiting_for_buyer or none"
            },
            {
                "name": "is_undecided",
                "description": "Whether the application is hidden by client or shortlisted"
            },
            {
                "name": "is_auto_hidden",
                "description": "The flag for auto hidden option"
            },
            {
                "name": "job_type",
                "description": "Job type of the job in the application"
            },
            {
                "name": "hr_charge_rate",
                "description": "Hourly charge rate"
            },
            {
                "name": "job_pref_matches.prefs_total",
                "description": "Total matches"
            },
            {
                "name": "job_pref_matches.prefs_match",
                "description": "Matched preferences"
            },
            {
                "name": "ui_opening_title",
                "description": "Job title"
            },
            {
                "name": "contractor_name",
                "description": "Contractor's name"
            },
            {
                "name": "contractor_ref",
                "description": "The id of the contractor that the offer is for"
            },
            {
                "name": "contractor_title",
                "description": "Contractor's title"
            },
            {
                "name": "offer_status",
                "description": "Offer's status"
            },
            {
                "name": "fp_amount_agreed",
                "description": "Aggreed charge amount for fixed-price offer"
            },
            {
                "name": "invite_letter",
                "description": "Message provided by client in the invitation"
            },
            {
                "name": "is_hidden_by_buyer",
                "description": "Is the job hidden by buyer"
            },
            {
                "name": "is_hidden_by_provider",
                "description": "Is the job hidden by provider"
            },
            {
                "name": "is_seen_by_buyer",
                "description": "If offer was viewed by current user (client or contractor)"
            },
            {
                "name": "opening_ciphertext",
                "description": "The key of the job that the offer is for"
            },
            {
                "name": "cover_letter",
                "description": "A message from provider"
            },
            {
                "name": "feedback_score",
                "description": "Feedback score for provider"
            },
            {
                "name": "contractor_portrait_url",
                "description": "Contractor's portrait URL"
            },
            {
                "name": "total_hours",
                "description": "The total amount of provider's hours"
            },
            {
                "name": "ctime_epoch",
                "description": "Time of creation"
            },
            {
                "name": "hr_pay_rate",
                "description": "Hourly pay rate"
            },
            {
                "name": "fp_pay_amount",
                "description": "Agreed pay amount for fixed-price job"
            },
            {
                "name": "fp_upfront_payment",
                "description": "Upfront payment for fixed-price job"
            },
            {
                "name": "engagement_duration_ref",
                "description": "Engagement duration reference"
            },
            {
                "name": "job__description",
                "description": "Job description"
            },
            {
                "name": "team_nid",
                "description": "Team ID"
            },
            {
                "name": "contractor_ciphertext",
                "description": "Contractor's ciphertext"
            },
            {
                "name": "question_answer",
                "description": "Question/answer history"
            },
            {
                "name": "is_recommended",
                "description": "The flag identifies the possible recommendation"
            },
            {
                "name": "client.company_ref",
                "description": "Company reference"
            },
            {
                "name": "client.company_name",
                "description": "Company name"
            }
        ],
        "scope": "View your job applications",
        "nickname": "getContractorJobApplication",
        "method": "GET"
    },
    "/api/hr/v3/fp/submissions/{submission_id}/reject.{format}:PUT": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "name": "submission_id",
                "allowMultiple": false,
                "required": true,
                "type": "integer",
                "paramType": "path",
                "description": "Submission reference."
            },
            {
                "name": "note2contractor",
                "allowMultiple": false,
                "required": true,
                "type": "string",
                "paramType": "query",
                "description": "Notes from client to freelancer."
            }
        ],
        "notes": "This API call allows a Hiring Manager to reject the submission of work to a milestone. Note that the user must be authorized in Upwork and must be a Hiring Manager in the team to be able to reject the submission.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "No recruiter or hiring manager permissions",
                "code": 403
            },
            {
                "message": "No access to team/company",
                "code": 403
            }
        ],
        "summary": "Reject the submission.",
        "scope": "Modify milestones and submissions on your behalf",
        "nickname": "putRejectSubmission",
        "method": "PUT"
    },
    "/api/profiles/v2/metadata/skills.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "integer",
                "name": "specialty",
                "description": "A specialty UID, which can be received from List specialties V2."
            }
        ],
        "notes": "Returns a list of skills available in a freelancer's profile.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Bad request",
                "code": 400
            }
        ],
        "summary": "List skills (V2).",
        "scope": "Read and search profiles of contractors and jobs, and get lists of public metadata",
        "nickname": "listMetadataSkills",
        "method": "GET"
    },
    "/api/tasks/v2/tasks/contracts/{engagement_ref}.{format}:PUT": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "integer",
                "name": "engagement_ref",
                "description": "Engagement reference ID. You can get it using 'List engagemnets' API call. Example: `1234`."
            },
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tasks",
                "description": "Activity tracking code or list of codes separated by semicolon (';')."
            }
        ],
        "notes": "Authorized user must have hiring permissions in order to use this API call. Activity appears in freelancer's team client only if his engagement is assigned to the activity and activities are activated for the ongoing contract. This call overrides assigned engagements for the given activities. For example, if you pass empty `task_codes` or just omit this parameter, freelancer's engagement is unassigned from all the activities it is assigned to.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "No access to company with this contract",
                "code": 403
            }
        ],
        "summary": "Assign to specific engagement the list of activities.",
        "scope": "Modify task codes",
        "nickname": "assignActivityToEngagement",
        "method": "PUT"
    },
    "/api/otask/v1/tasks/companies/{company_id}/teams/{team_id}/unarchive/{code}.{format}:PUT": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_id",
                "description": "The company ID. Use the `parent_team__id` value from the 'Get teams' API call."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "team_id",
                "description": "The team ID."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "code",
                "description": "An activity tracking code. It can be the list of codes, separated by ';' (semicolon)."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "If you want to unarchive activity for company, use the `company_id` value for `team_id` as well.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "No access to company",
                "code": 403
            },
            {
                "message": "No access to team",
                "code": 403
            }
        ],
        "summary": "Unarchive single activity.",
        "scope": "Modify task codes",
        "nickname": "unarchiveActivity",
        "method": "PUT"
    },
    "/api/hr/v3/fp/milestones.{format}:POST": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "name": "contract_reference",
                "allowMultiple": false,
                "required": true,
                "type": "integer",
                "paramType": "query",
                "description": "Contract reference. Contracts info are available in the Engagements API."
            },
            {
                "name": "milestone_description",
                "allowMultiple": false,
                "required": true,
                "type": "string",
                "paramType": "query",
                "description": "Name of the milestone."
            },
            {
                "name": "deposit_amount",
                "allowMultiple": false,
                "required": true,
                "type": "string",
                "paramType": "query",
                "description": "Amount to deposit for this milestone."
            },
            {
                "name": "due_date",
                "allowMultiple": false,
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "Expected date of finalization. Format mm-dd-yyyy."
            }
        ],
        "notes": "This API call allows a Hiring Manager to create a milestone. Note that the user must be authorized in Upwork and must be Hiring Manager in the team to be able to create a milestone.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "No recruiter or hiring manager permissions",
                "code": 403
            },
            {
                "message": "No access to team/company",
                "code": 403
            },
            {
                "message": "Contract id must be given",
                "code": 400
            },
            {
                "message": "The function cannot be used to create the first milestone",
                "code": 400
            },
            {
                "message": "Date is earlier or equal than milestone {id}",
                "code": 400
            }
        ],
        "summary": "Create a milestone.",
        "scope": "Modify milestones and submissions on your behalf",
        "nickname": "postNewMilestone",
        "method": "POST"
    },
    "/api/team/v3/snapshots/contracts/{contract_id}/{timestamp}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "contract_id",
                "description": "The contract ID."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "timestamp",
                "description": "The timestamp as a UNIX timestamp (number of seconds after epoch)."
            },
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "Gets a specific snapshot",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "Get snapshot.",
        "outputFields": [
            {
                "name": "minutes.time",
                "description": "Timestamp"
            },
            {
                "name": "minutes.mouse",
                "description": "Clicks"
            },
            {
                "name": "minutes.keyboard",
                "description": "Events"
            },
            {
                "name": "time",
                "description": "Timestamp"
            },
            {
                "name": "status",
                "description": "Status"
            },
            {
                "name": "contractId",
                "description": "Contract ID"
            },
            {
                "name": "mouseEventsCount",
                "description": "Mouse events"
            },
            {
                "name": "keyboardEventsCount",
                "description": "Keyboard events"
            },
            {
                "name": "uid",
                "description": "UID"
            },
            {
                "name": "activeWindowTitle",
                "description": "Window title"
            },
            {
                "name": "teamName",
                "description": "Team name"
            },
            {
                "name": "task",
                "description": "Task"
            },
            {
                "name": "memo",
                "description": "Memo"
            },
            {
                "name": "hasScreenshot",
                "description": "Flag indicates if the screenshot exists"
            },
            {
                "name": "screenshotUrl",
                "description": "Screenshot URL"
            },
            {
                "name": "screenshotImg",
                "description": "Screenshot image"
            },
            {
                "name": "screenshotImgLrg",
                "description": "Large screenshot image"
            },
            {
                "name": "screenshotImgMed",
                "description": "Medium screenshot image"
            },
            {
                "name": "screenshotImgThmb",
                "description": "Screenshot thumbnail"
            },
            {
                "name": "hasCamerashot",
                "description": "Flag indicates if a camera screenshot available"
            },
            {
                "name": "webcamUrl",
                "description": "Webcam URL"
            },
            {
                "name": "webcamImg",
                "description": "Webcam image URL"
            },
            {
                "name": "webcamImgThmb",
                "description": "Webcam image thumbnail"
            },
            {
                "name": "companyId",
                "description": "Company ID"
            },
            {
                "name": "workdiary_api",
                "description": "URL to Workdiary API"
            }
        ],
        "scope": "View your workdiary",
        "nickname": "getSnapshot",
        "method": "GET"
    },
    "/api/profiles/v1/jobs/{job_key}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "job_key",
                "description": "The job profile key or a list of keys, separated by semicolon (';'), number of keys per request is limited to 20."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "This call takes a job key or recno and returns detailed profile information about the job. This method returns an exhaustive list of attributes associated with the job.",
        "responseMessages": [
            {
                "message": "Bad Request",
                "code": 400
            }
        ],
        "summary": "Get job profile by key.",
        "outputFields": [
            {
                "name": "op_other_jobs.op_ciphertext",
                "description": "Job ciphertext"
            },
            {
                "name": "ciphertext",
                "description": "Job's ciphertext"
            },
            {
                "name": "op_cny_upm_verified",
                "description": "Flag indicating whether company's payment method is verified"
            },
            {
                "name": "op_status",
                "description": "Job status, can be \"Active\" or \"Closed\""
            },
            {
                "name": "candidates.ciphertext",
                "description": "Job ciphertext"
            },
            {
                "name": "candidates.create_date_ts",
                "description": "Date of creation"
            },
            {
                "name": "op_required_skills.skill",
                "description": "Skill name"
            },
            {
                "name": "buyer.op_tot_fp_asgs",
                "description": "Total fixed price assignments"
            },
            {
                "name": "buyer.op_state",
                "description": "Job state, two letter abbreviation"
            },
            {
                "name": "buyer.op_tot_jobs_filled",
                "description": "Total jobs filled"
            },
            {
                "name": "buyer.op_adjusted_score",
                "description": "Client's feedback score"
            },
            {
                "name": "buyer.op_tot_jobs_posted",
                "description": "Total jobs posted"
            },
            {
                "name": "buyer.op_tot_charge",
                "description": "Bucketed total charge"
            },
            {
                "name": "buyer.op_tot_jobs_open",
                "description": "Total jobs open"
            },
            {
                "name": "buyer.op_tot_asgs",
                "description": "Total assignments"
            },
            {
                "name": "buyer.op_timezone",
                "description": "Client timezone"
            },
            {
                "name": "buyer.op_city",
                "description": "Client city"
            },
            {
                "name": "buyer.op_country",
                "description": "Client country"
            },
            {
                "name": "buyer.op_contract_date",
                "description": "Member since"
            },
            {
                "name": "buyer.op_tot_hours",
                "description": "Total number of buyer's hours"
            },
            {
                "name": "op_pref_english_skill",
                "description": "Client's english level preference, 1-5"
            },
            {
                "name": "op_job_category_2",
                "description": "Second level job category"
            },
            {
                "name": "op_job_category_v2",
                "description": "Job category (V2)"
            },
            {
                "name": "assignments.as_total_charge",
                "description": "Total charge"
            },
            {
                "name": "assignments.as_from",
                "description": "Contract start state (mm/yyyy)"
            },
            {
                "name": "assignments.as_ciphertext_opening_recno",
                "description": "Ciphertext of related job"
            },
            {
                "name": "assignments.as_engagement_title",
                "description": "Contract title"
            },
            {
                "name": "assignments.as_to",
                "description": "Contract end date (mm/yyyy or 'Present')"
            },
            {
                "name": "assignments.as_ciphertext",
                "description": "Hired freelancer's ciphertext"
            },
            {
                "name": "assignments.as_status",
                "description": "Assignment status, can be \"Requested\", \"Estimate\", \"In Process\", \"Active\", \"Rejected\", \"Closed\", \"Cancelled\" or \"Fixed\""
            },
            {
                "name": "assignments.as_job_type",
                "description": "Type of job related to this assignment. Type can be fixed price or hourly"
            },
            {
                "name": "assignments.as_rate",
                "description": "Rate of freelancer for this assignment"
            },
            {
                "name": "assignments.as_total_hours",
                "description": "Total hours spent on this assignment by the freelancer"
            },
            {
                "name": "assignments.as_opening_title",
                "description": "Title of the job related to this assignment"
            },
            {
                "name": "assignments.feedback.scores.label",
                "description": "Feedback type label \"Skills\",\"Quality\", etc"
            },
            {
                "name": "assignments.feedback.scores.description",
                "description": "Standard description of feedback type"
            },
            {
                "name": "assignments.feedback.scores.comment",
                "description": "Client's feedback comment on the relevant asignment"
            },
            {
                "name": "assignments.feedback.score",
                "description": "Aggregate feedback score for the job based on all individual feedback type scores"
            },
            {
                "name": "assignments.feedback.comment",
                "description": "Client's feedback comment on the relevant asignment"
            },
            {
                "name": "assignment_info.ciphertext_developer_recno",
                "description": "Freelancer's ciphertext"
            },
            {
                "name": "assignment_info.feedback_for_buyer.scores",
                "description": "Scores in details"
            },
            {
                "name": "assignment_info.feedback_for_buyer.score",
                "description": "Common given score"
            },
            {
                "name": "assignment_info.feedback_for_provider.scores",
                "description": "Scores in details"
            },
            {
                "name": "assignment_info.feedback_for_provider.score",
                "description": "Common given score"
            },
            {
                "name": "assignment_info.total_charge",
                "description": "Total charge"
            },
            {
                "name": "assignment_info.tot_hours",
                "description": "Total hours"
            },
            {
                "name": "assignment_info.start_date",
                "description": "Start date"
            },
            {
                "name": "assignment_info.end_date",
                "description": "End date"
            },
            {
                "name": "op_is_cover_letter_required",
                "description": "Flag indicating if cover letter is required"
            },
            {
                "name": "op_job_type",
                "description": "Job type, \"Hourly\" or \"Fixed\""
            },
            {
                "name": "op_job",
                "description": "Job description"
            },
            {
                "name": "op_pref_location",
                "description": "Client's preferred freelancer location"
            },
            {
                "name": "op_amount",
                "description": "Fixed-price budget"
            },
            {
                "name": "op_title",
                "description": "Job title"
            },
            {
                "name": "op_ctime",
                "description": "Job created timestamp"
            },
            {
                "name": "op_pref_hourly_rate_min",
                "description": "Client preferred minimum hourly rate"
            },
            {
                "name": "op_contractor_tier",
                "description": "Client's preferred freelancer tier (1=beginner, 2=intermediate, 3=expert)"
            },
            {
                "name": "op_pref_hourly_rate_max",
                "description": "Client preferred maximum hourly rate"
            },
            {
                "name": "op_pref_has_portfolio",
                "description": "Client prefers portfolio (1=true, 0=false)"
            },
            {
                "name": "op_additional_questions.question",
                "description": "Additional question"
            },
            {
                "name": "op_additional_questions.position",
                "description": "Position of additional question"
            },
            {
                "name": "op_attached_doc",
                "description": "URL of attached document"
            },
            {
                "name": "op_job_category_1",
                "description": "First level job category"
            },
            {
                "name": "op_pref_fb_score",
                "description": "Client's preferred feedback score, client preferrs this or greater feedback scores"
            },
            {
                "name": "op_pref_odesk_hours",
                "description": "Client's preferred hours of experience"
            },
            {
                "name": "op-tot-intv",
                "description": "Total active interviewees"
            },
            {
                "name": "op_eng_duration",
                "description": "Estimate duration"
            },
            {
                "name": "op_engagement",
                "description": "Estimate duration description"
            },
            {
                "name": "op_tot_feedback",
                "description": "Total number of feedbacks"
            },
            {
                "name": "op_low_hourly_rate_all",
                "description": "The lowest proposed rate"
            },
            {
                "name": "op_high_hourly_rate_all",
                "description": "The highest proposed rate"
            },
            {
                "name": "op-tot-cand",
                "description": "Total number of candidates"
            },
            {
                "name": "op_pref_group_id",
                "description": "Group ID"
            },
            {
                "name": "op_pref_group_logo",
                "description": "Group logo"
            },
            {
                "name": "op_pref_group_name",
                "description": "Group name"
            }
        ],
        "scope": "Read and search profiles of contractors and jobs, and get lists of public metadata",
        "nickname": "getJobProfileByKey",
        "method": "GET"
    },
    "/api/offers/v1/clients/offers/{offer_id}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "offer_id",
                "description": "Offer reference ID."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "name": "company_id",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "The client's company reference ID. Example: `34567`. Get it using 'List companies' API call. If `company_id` is not specified, the API infers it from job's data relying on the provided `job__reference` parameter. Either `company_id` or `job__reference` parameter should be specified."
            },
            {
                "name": "job__reference",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "The job reference ID. Get it using 'List jobs' API call. Either `job__reference` or `company_id` parameter should be specified."
            }
        ],
        "notes": "This call retrieves details about a specific offer as a client.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "No recruiter or hiring manager permissions",
                "code": 403
            },
            {
                "message": "No access to team/company",
                "code": 403
            }
        ],
        "summary": "Get specific offer as client.",
        "outputFields": [
            {
                "name": "rid",
                "description": "Offer ID"
            },
            {
                "name": "offer_description",
                "description": "First event message if exists"
            },
            {
                "name": "client_user_ref",
                "description": "Client reference ID"
            },
            {
                "name": "client_org_ref",
                "description": "Client's organization reference ID"
            },
            {
                "name": "contractor_user_ref",
                "description": "Contractor reference ID"
            },
            {
                "name": "contractor_org_ref",
                "description": "Contractor's organization reference ID"
            },
            {
                "name": "title",
                "description": "Offer Title"
            },
            {
                "name": "type",
                "description": "Offer type. Can be either 'hourly' or 'fixed'"
            },
            {
                "name": "last_event_state",
                "description": "Status of the offer. Status can be 'accepted', 'new', 'declined', 'expired', 'withdrawn', 'cancelled' and 'changed'"
            },
            {
                "name": "is_visible_to_contractor",
                "description": "Flag to identify contractor visibility to the offer"
            },
            {
                "name": "job_posting_ref",
                "description": "Relevant job key"
            },
            {
                "name": "xtime",
                "description": "Offer expiration date"
            },
            {
                "name": "terms_data.charge_weekly_stipend_amount",
                "description": "Weekly charge amount according to terms"
            },
            {
                "name": "terms_data.charge_rate",
                "description": "Charge rate according to terms"
            },
            {
                "name": "terms_data.charge_amount",
                "description": "Charge amount according to terms"
            },
            {
                "name": "terms_data.charge_upfront_percent",
                "description": "Charge upfront percent according to terms"
            },
            {
                "name": "terms_data.start_date",
                "description": "Start date according to terms"
            },
            {
                "name": "terms_data.type",
                "description": "Type of work according to terms"
            },
            {
                "name": "terms_data.weekly_limit",
                "description": "Weekly limit for hourly job according to terms"
            },
            {
                "name": "terms_data.manual_time_allowed",
                "description": "Flag identicating if manual time is allowed according to terms"
            },
            {
                "name": "milestones.deposit_amount",
                "description": "Deposit amount"
            },
            {
                "name": "milestones.description",
                "description": "Milestone description"
            },
            {
                "name": "milestones.due_date",
                "description": "Milestone ETA"
            },
            {
                "name": "milestones.state",
                "description": "Milestone state. Possible values are: `not_funded`, `in_offer`, `active`, `submitted`, `rejected`, `rejected_by_odesk`, `paid`, `paid_by_odesk`, `not_funded_closed`, `cancelled_by_client`, `cancelled_by_contractor`, `offer_cancelled`"
            },
            {
                "name": "milestones.id",
                "description": "Unique milestone ID"
            }
        ],
        "scope": "View your job offers",
        "nickname": "getClientOffer",
        "method": "GET"
    },
    "/api/hr/v2/companies/{company_reference}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_reference",
                "description": "The reference ID of the company."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "Returns details regarding a specific company. If a user does not have access to this company, the call returns a 403 error. This API call does not return a list of teams within the company.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "Get specific company.",
        "outputFields": [
            {
                "name": "reference",
                "description": "Company reference"
            },
            {
                "name": "owner_ciphertext",
                "description": "Ciphertext of the company owner"
            },
            {
                "name": "name",
                "description": "Company name"
            },
            {
                "name": "payment_verification_status",
                "description": "Payment verified"
            }
        ],
        "scope": "View the structure of your companies/teams",
        "nickname": "hrGetCompany",
        "method": "GET"
    },
    "/gds/timereports/v1/companies/{company_id}/teams/{team_id}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_id",
                "description": "The company ID. Use Companies & Teams resource to get it."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "team_id",
                "description": "The team ID. Use Companies & Teams resource to get it."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tq",
                "description": "The Google query. This should be the valid expression in Upwork Google Data Source Language. Fields that cannot appear in the query: `team_id`, `team_name`. Example: `tq=SELECT worked_on, provider_id, provider_name, sum(hours) WHERE worked_on >= '2009-10-01' AND worked_on <= '2009-10-31'`."
            },
            {
                "enum": [
                    "out:xml",
                    "out:json",
                    "out:csv"
                ],
                "name": "tqx",
                "defaultValue": "out:json",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The return format. It can be in either XML, JSON or CSV formatting. JSON is returned by default. Example: `tqx=out:xml`."
            }
        ],
        "notes": "This call generates time report for a specific team, with detailed monetary information based on the given query at the time the call is made. Note that if the `provider_id` field is present in the query, the caller must be a supervisor of the freelancers. If the `provider_id` is not provided in the query, the caller must have either hiring manager or finance permission to the specified team.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Access denied (user has not enough team/company permissions)",
                "code": 200
            },
            {
                "message": "Invalid query",
                "code": 200
            },
            {
                "message": "Other (in case of CUSTOM_ERROR exception)",
                "code": 200
            }
        ],
        "summary": "Get time reports for a team.",
        "scope": "Generate time and financial reports for your companies and teams",
        "nickname": "getTimeReportTeam",
        "method": "GET"
    },
    "/api/hr/v2/contracts/{contract_reference}/restart.{format}:PUT": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "contract_reference",
                "description": "The reference ID of the contract. It's the engagement reference ID."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "message",
                "description": "A message for the contractor."
            }
        ],
        "notes": "This call allows you to restart a contract.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "Restart a contract",
        "scope": "Close your contracts",
        "nickname": "hrRestartContract",
        "method": "PUT"
    },
    "/api/messages/v3/{company_user_id}/rooms.{format}:POST": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_user_id",
                "description": "The company ID or team ID, or user ID. Use 'List companies' or 'List teams' API calls to get the team/company IDs."
            },
            {
                "name": "format",
                "paramType": "path",
                "required": false,
                "type": "string",
                "defaultValue": "json",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "roomName",
                "description": "The name of the room."
            },
            {
                "enum": [
                    "GROUP",
                    "ONE_ON_ONE"
                ],
                "name": "roomType",
                "paramType": "query",
                "required": false,
                "type": "string",
                "description": "The room type."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "topic",
                "description": "The topic of the room. Note that 1:1 rooms do not have topics."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "context",
                "description": "Any contextual information related to the room."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "array of json objects",
                "name": "users",
                "description": "The initial users that should be in the room. For one-on-one rooms, 2 users are required to create a room."
            },
            {
                "enum": [
                    "owner",
                    "admin",
                    "participant"
                ],
                "name": "role",
                "paramType": "query",
                "required": false,
                "type": "string",
                "description": "Only the current owner can change the room to contain a new owner. Admins can change the room name and topic, and invite new users. This field is a part of `users` field, e.g. `users { {userId: '~cipher', orgId: 'mycompany', role: 'admin', firstName: 'julian'}, {userId: '~cipher2', orgId: 'mycompany', role: 'owner', firstName: 'maksym'} }`"
            },
            {
                "paramType": "query",
                "required": false,
                "type": "array of json objects",
                "name": "objectReferences",
                "description": "Object references associated with the story."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "jobApplicationId",
                "description": "The ID of the job application associated with the room, if applicable."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "offerIds",
                "description": "The IDs of any offers associated with the room."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "contractId",
                "description": "The ID of the job contract (parent assignment) associated with the room, if applicable."
            }
        ],
        "notes": "Creates a new room. Note that 1-1 rooms must be passed in a single user in the users array. Both users are created with `admin` role in the room and the role you pass is ignored (there is no owner).",
        "responseMessages": [
            {
                "message": "Created",
                "code": 201
            },
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "Bad Request",
                "code": 400
            }
        ],
        "summary": "Create a new room.",
        "scope": "Create a new room, update an existent one or post a message in the room",
        "nickname": "messagesCreateRoom",
        "method": "POST"
    },
    "/api/team/v2/snapshots/contracts/{contract_id}/{timestamp}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "contract_id",
                "description": "The contract ID."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "timestamp",
                "description": "The timestamp either in UTC according to ISO 8601 (yyyymmddTHHMMSSZ) or as a UNIX timestamp (number of seconds after epoch). If absent, it defaults to the current time. If an exact timestamp match is not found, then the latest snapshot during the current and the previous 10 minute slots (i.e. up to 20 minutes past) is returned. If no activity is found in this time range, a snapshot with PRIVATE status is returned."
            },
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "Gets a specific snapshot by Contract.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden (user is not invited to specified company)",
                "code": 403
            }
        ],
        "summary": "Get snapshot by Contract.",
        "outputFields": [
            {
                "name": "status",
                "description": "Status"
            },
            {
                "name": "time",
                "description": "Timestamp"
            },
            {
                "name": "billing_status",
                "description": "Billing status"
            },
            {
                "name": "team_name",
                "description": "Team name"
            },
            {
                "name": "activity",
                "description": "Activity"
            },
            {
                "name": "online_presence",
                "description": "Online presence"
            },
            {
                "name": "mouse_events_count",
                "description": "Mouse events count"
            },
            {
                "name": "company_id",
                "description": "Company ID"
            },
            {
                "name": "timezone",
                "description": "Timezone"
            },
            {
                "name": "uid",
                "description": "UID"
            },
            {
                "name": "keyboard_events_count",
                "description": "Keyboard events count"
            },
            {
                "name": "memo",
                "description": "Memo"
            },
            {
                "name": "active_window_title",
                "description": "Active window title"
            },
            {
                "name": "report24_img",
                "description": "Report image URL"
            },
            {
                "name": "cellts",
                "description": "Cell timestamp"
            },
            {
                "name": "computer_name",
                "description": "Computer name"
            },
            {
                "name": "digest",
                "description": "Digest"
            },
            {
                "name": "online_presence_img",
                "description": "Online precence URL"
            },
            {
                "name": "user_id",
                "description": "User ID"
            },
            {
                "name": "client_version",
                "description": "Client version"
            },
            {
                "name": "user.uid",
                "description": "User ID"
            },
            {
                "name": "user.timezone_offset",
                "description": "Timezone offset"
            },
            {
                "name": "user.last_name",
                "description": "Last name"
            },
            {
                "name": "user.first_name",
                "description": "First name"
            },
            {
                "name": "user.creation_time",
                "description": "Creation timestamp"
            },
            {
                "name": "user.archiving_time",
                "description": "Archiving timestamp"
            }
        ],
        "scope": "View your workdiary",
        "nickname": "getSnapshotByContract",
        "method": "GET"
    },
    "/api/hr/v1/jobs/{job_key}/candidates.{format}:POST": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "job_key",
                "description": "Job key. For example: `~0150f0d859bb3453d0`."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "name": "profile_key",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "The unique freelancer's key. Example: `~~677961dcd7f65c01`. Either `profile_key` or `provider__reference` parameter should be specified."
            },
            {
                "name": "provider__reference",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "The freelancer's reference ID.Example: `12345`. It is used if the `profile_key` param is absent."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "cover",
                "description": "The text of the cover letter."
            }
        ],
        "notes": "This call can be used to invite a selected freelancer to an interview for the job referenced.",
        "responseMessages": [
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "Invite to interview.",
        "scope": "Create, modify and remove job posts",
        "nickname": "inviteToInterview",
        "method": "POST"
    },
    "/api/team/v3/workdays/companies/{company_id}/{from_date,till_date}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_id",
                "description": "The company ID."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "from_date",
                "description": "The start date in `yyyymmdd` format."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "end_date",
                "description": "The end date in `yyyymmdd` format."
            },
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "offset",
                "description": "Offset in seconds to support the different time zones."
            }
        ],
        "notes": "The Workdays method retrieves all work days within a specific period and in a specific company for currently authenticated user. Keep in mind that a day is dependent on server time and not the day in which the query is made. Make sure to test with various locations before you're done.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "Bad Request",
                "code": 400
            }
        ],
        "summary": "Get Workdays by Company.",
        "outputFields": [
            {
                "name": "workdays",
                "description": "List of workdays"
            }
        ],
        "scope": "View your workdiary",
        "nickname": "getWorkdaysByCompany",
        "method": "GET"
    },
    "/gds/finreports/v2/financial_accounts/{accounting_entity_ref}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "integer",
                "name": "accounting_entity_ref",
                "description": "The reference ID of an accounting entity. Example: `34567`. You need to contact Support Team in order to receive it - it remains unchangeable."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tq",
                "description": "The Google query. This should be the valid expression in Upwork Google Data Source Language. Example: `tq=SELECT amount WHERE date >= '2009-10-01' AND date <= '2009-10-31'`."
            },
            {
                "enum": [
                    "out:xml",
                    "out:json",
                    "out:csv"
                ],
                "name": "tqx",
                "defaultValue": "out:json",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The return format. It can be in either XML, JSON or CSV formatting. JSON is returned by default. Example: `tqx=out:xml`."
            }
        ],
        "notes": "This call allows a user to view his/her own accounting transactions or all transactions with accounting entities tied to teams to which the user has hiring manager or finance permissions. Disallowed fields: none. Supported filters: `date`, `week`, `month`, `year`, `date_due`, `provider_company__reference`, `provider_company__id`, `provider__reference`, `provider__id`, `buyer_company__reference`, `buyer_company__id`, `buyer_team__reference`, `buyer_team__id`, `assignment__reference`, `type`, `subtype`, `po_number`, `provider_team__reference`, `provider_team__id`. Permissions: finance manager.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "User has not enough permissions",
                "code": 200
            },
            {
                "message": "Invalid query",
                "code": 200
            },
            {
                "message": "Other (in case of CUSTOM_ERROR exception)",
                "code": 200
            }
        ],
        "summary": "Get financial reports for an user account.",
        "scope": "Generate time and financial reports for your companies and teams",
        "nickname": "getFinancialReportForAccount",
        "method": "GET"
    },
    "/api/otask/v1/tasks/companies/{company_id}/tasks/batch.{format}:PUT": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_id",
                "description": "The company ID. Use the `parent_team__id` value from the 'Get teams' API call."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "data",
                "description": "Data for activities in CSV format but with `<br>` as line separator: `\"{company_id}\",\"{team_id}\",\"{user_id}\",\"{code}\",\"{description}\",\"{url}\"`. Example: `\"acmeinc\",\"\",\"\",\"ABC\",\"Project ABC\",\"https://www.acmeinc.com/project/abc\"<br>\"acmeinc\",\"acmeinc:dev\",\"b42\",\"123\",\"Task 123\",\"https://www.acmeinc.com/task/123\"`. Note: the given data replaces the existing \"acmeinc\" company level records with the new \"ABC\" record and \"acmeinc:dev\":\"b42\" user level records with the new \"123\" record."
            }
        ],
        "notes": "Activities can be updated using a CSV file via the API. This process actually deletes the corresponding activities and replaces them with the newly created ones with the specified details. Note that the authorized user has to have hiring permissions in order to use this API call.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "No access to company",
                "code": 403
            },
            {
                "message": "No access to team",
                "code": 403
            }
        ],
        "summary": "Update bulk of activities.",
        "scope": "Modify task codes",
        "nickname": "updateTasksBatch",
        "method": "PUT"
    },
    "/gds/finreports/v2/providers/{provider_ref}/billings:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "integer",
                "name": "provider_ref",
                "description": "The reference ID of the freelancer (authenticated user). Use Teams & Companies resource to get it."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tq",
                "description": "The Google query. This should be the valid expression in Upwork Google Data Source Language. Example: `tq=SELECT amount WHERE date >= '2009-10-01' AND date <= '2009-10-31'`."
            },
            {
                "enum": [
                    "out:xml",
                    "out:json",
                    "out:csv"
                ],
                "name": "tqx",
                "defaultValue": "out:json",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The return format. It can be in either XML, JSON or CSV formatting. JSON is returned by default. Example: `tqx=out:xml`."
            }
        ],
        "notes": "This call allows freelancers to find out what clients are paying for their services. Disallowed fields: `comment`, `po_number`. Supported filters: `date`, `week`, `month`, `year`, `date_due`, `buyer_company__reference`, `buyer_company__id`, `buyer_team__reference`, `buyer_team__id`, `provider_company__reference`, `provider_company__id`, `assignment__reference`, `type`, `subtype`. Permissions: Exclusive Agency Member.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "User has not enough permissions",
                "code": 200
            },
            {
                "message": "Invalid query",
                "code": 200
            },
            {
                "message": "Other (in case of CUSTOM_ERROR exception)",
                "code": 200
            }
        ],
        "summary": "Get billing reports for a freelancer.",
        "scope": "Generate time and financial reports for your companies and teams",
        "nickname": "getBillingReportFreelancer",
        "method": "GET"
    },
    "/api/messages/v3/{company_user_id}/rooms/{room_id}/stories.{format}:POST": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_user_id",
                "description": "The company ID or team ID, or user ID. Use 'List companies' or 'List teams' API calls to get the team/company IDs."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "room_id",
                "description": "The ID of the room."
            },
            {
                "name": "format",
                "paramType": "path",
                "required": false,
                "type": "string",
                "defaultValue": "json",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "message",
                "description": "The custom user message associated with this Action and Object, if any.  There is a configurable hard limit of 10KB on the length of the message."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "userId",
                "description": "The user ID of the author of the story. This is the user that performed the action."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "orgId",
                "description": "The org ID of the author of the story. If a `userId` is provided, an `orgId` must be provided too."
            }
        ],
        "notes": "Adds a new story to the given room.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "Send a message to a room.",
        "scope": "Create a new room, update an existent one or post a message in the room",
        "nickname": "messagesSendMessage",
        "method": "POST"
    },
    "/api/hr/v2/jobs/{job_key}.{format}:PUT": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "job_key",
                "description": "Job key. For example: `~0150f0d859bb3453d0`."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "buyer_team__reference",
                "description": "The reference ID of the client's team that posted the job. Example: `34567`. You can get it from List teams API call."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "title",
                "description": "Title of the job. Example: `Development of API ecosystem`"
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "description",
                "description": "The job description. Example: `A new interesting start-up requires an API ecosystem`."
            },
            {
                "enum": [
                    "public",
                    "upwork",
                    "invite-only"
                ],
                "name": "visibility",
                "paramType": "query",
                "required": true,
                "type": "string",
                "description": "The visibility of the job. Valid values are: `public` - the job is available to all users who search for jobs; `upwork` -  the job appears in search results only for Upwork users who are logged in; `invite-only` - jobs do not appear in search and are used for jobs where the client wants to control the potential applicants."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "category2",
                "description": "The category of the job according to the list of Categories 2.0. Example: `Web Development`. You can get it via Metadata Category resource."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "subcategory2",
                "description": "The subcategory of the job according to the list of Categories 2.0. Example: `Web & Mobile Development`. You can get it via Metadata Category (v2) resource. It has priority over legacy sub/category parameters."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "start_date",
                "description": "The start date of the job. If the `start_date` is not included, the job defaults to starting immediately. Example: `06-15-2011`."
            },
            {
                "name": "budget",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "number",
                "description": "The budget for a fixed-price job. Example: `100`."
            },
            {
                "name": "duration",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "integer",
                "description": "The duration of the job in hours. Used for hourly-jobs. Example: `90`."
            },
            {
                "enum": [
                    "open",
                    "filled",
                    "cancelled"
                ],
                "name": "status",
                "paramType": "query",
                "required": false,
                "type": "string",
                "description": "The status of the job. Valid values are: `open`, `filled`, and `cancelled`."
            }
        ],
        "notes": "This call updates information of a job post.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden (operation is unauthorized)",
                "code": 403
            }
        ],
        "summary": "Update a job.",
        "scope": "Create, modify and remove job posts",
        "nickname": "updateJob",
        "method": "PUT"
    },
    "/gds/timereports/v2/companies/{company_id}/teams/{team_id}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_id",
                "description": "The company ID. Use Companies & Teams resource to get it."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "team_id",
                "description": "The team ID. Use Companies & Teams resource to get it."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tq",
                "description": "The Google query. This should be the valid expression in Upwork Google Data Source Language. Fields that cannot appear in the query: `team_id`, `team_name`. Example: `tq=SELECT worked_on, provider_id, provider_name, sum(hours) WHERE worked_on >= '2009-10-01' AND worked_on <= '2009-10-31'`."
            },
            {
                "enum": [
                    "out:xml",
                    "out:json",
                    "out:csv"
                ],
                "name": "tqx",
                "defaultValue": "out:json",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The return format. It can be in either XML, JSON or CSV formatting. JSON is returned by default. Example: `tqx=out:xml`."
            }
        ],
        "notes": "This call generates time report for a specific team, with detailed monetary information based on the given query at the time the call is made. Note that if the `provider_id` field is present in the query, the caller must be a supervisor of the freelancers. If the `provider_id` is not provided in the query, the caller must have either hiring manager or finance permission to the specified team.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Access denied (user has not enough team/company permissions)",
                "code": 200
            },
            {
                "message": "Invalid query",
                "code": 200
            },
            {
                "message": "Other (in case of CUSTOM_ERROR exception)",
                "code": 200
            }
        ],
        "summary": "Get time reports for a team.",
        "scope": "Generate time and financial reports for your companies and teams",
        "nickname": "getTimeReportTeam",
        "method": "GET"
    },
    "/api/offers/v1/contractors/offers/{offer_id}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "offer_id",
                "description": "Offer reference ID."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "This call retrieves details about a specific offer received by a freelancer.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "Get specific freelancer's offer.",
        "outputFields": [
            {
                "name": "rid",
                "description": "Offer ID"
            },
            {
                "name": "client_user_ref",
                "description": "Client reference ID"
            },
            {
                "name": "client_org_ref",
                "description": "Client's organization reference ID"
            },
            {
                "name": "contractor_user_ref",
                "description": "Contractor reference ID"
            },
            {
                "name": "contractor_org_ref",
                "description": "Contractor's organization reference ID"
            },
            {
                "name": "title",
                "description": "Offer Title"
            },
            {
                "name": "type",
                "description": "Offer type. Can be either 'hourly' or 'fixed'"
            },
            {
                "name": "last_event_state",
                "description": "Status of the offer. Status can be 'accepted', 'new', 'declined', 'expired', 'withdrawn', 'cancelled' and 'changed'"
            },
            {
                "name": "is_visible_to_contractor",
                "description": "Flag to identify contractor visibility to the offer"
            },
            {
                "name": "job_posting_ref",
                "description": "Relevant job key"
            },
            {
                "name": "xtime",
                "description": "Offer expiration date"
            },
            {
                "name": "terms_data.charge_weekly_stipend_amount",
                "description": "Weekly charge amount according to terms"
            },
            {
                "name": "terms_data.charge_rate",
                "description": "Charge rate according to terms"
            },
            {
                "name": "terms_data.charge_amount",
                "description": "Charge amount according to terms"
            },
            {
                "name": "terms_data.charge_upfront_percent",
                "description": "Charge upfront percent according to terms"
            },
            {
                "name": "terms_data.start_date",
                "description": "Start date according to terms"
            },
            {
                "name": "terms_data.type",
                "description": "Type of work according to terms"
            },
            {
                "name": "terms_data.weekly_limit",
                "description": "Weekly limit for hourly job according to terms"
            },
            {
                "name": "terms_data.manual_time_allowed",
                "description": "Flag identicating if manual time is allowed according to terms"
            },
            {
                "name": "milestones.deposit_amount",
                "description": "Deposit amount"
            },
            {
                "name": "milestones.description",
                "description": "Milestone description"
            },
            {
                "name": "milestones.due_date",
                "description": "Milestone ETA"
            },
            {
                "name": "milestones.state",
                "description": "Milestone state. Possible values are: `not_funded`, `in_offer`, `active`, `submitted`, `rejected`, `rejected_by_odesk`, `paid`, `paid_by_odesk`, `not_funded_closed`, `cancelled_by_client`, `cancelled_by_contractor`, `offer_cancelled`"
            },
            {
                "name": "milestones.id",
                "description": "Unique milestone ID"
            }
        ],
        "scope": "View your job offers",
        "nickname": "getContractorOffer",
        "method": "GET"
    },
    "/api/messages/v3/{company_user_id}/rooms/{room_id}.{format}:PUT": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_user_id",
                "description": "The company ID or team ID, or user ID. Use 'List companies' or 'List teams' API calls to get the team/company IDs."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "room_id",
                "description": "The ID of the room."
            },
            {
                "name": "format",
                "paramType": "path",
                "required": false,
                "type": "string",
                "defaultValue": "json",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "roomName",
                "description": "The new display name of the room, if the room is being renamed."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "topic",
                "description": "The topic of the conversation currently going on in the room, if any."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "isReadOnly",
                "description": "Marks the room read-only (archived). Setting this to true will append the text ` (archived)` to the room name. Setting both this argument and the `roomName` in the same request is prohibited."
            }
        ],
        "notes": "Updates the metadata of an existing room and archives it.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "Not Found",
                "code": 404
            }
        ],
        "summary": "Archive or rename a room.",
        "scope": "Create a new room, update an existent one or post a message in the room",
        "nickname": "messagesSendMessage",
        "method": "PUT"
    },
    "/api/hr/v3/contractors/applications.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "enum": [
                    "interviews",
                    "invites",
                    "active"
                ],
                "name": "status",
                "paramType": "query",
                "required": false,
                "type": "string",
                "allowMultiple": false,
                "description": "The current status of the job application. If no value is specified, it will return applications with all statuses."
            }
        ],
        "notes": "This call lists all job applications made by a freelancer.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            }
        ],
        "summary": "List job applications as a freelancer.",
        "outputFields": [
            {
                "name": "rid",
                "description": "Record ID"
            },
            {
                "name": "interview_status",
                "description": "The interview status of the candidacy. The values can be: in_process, waiting_for_provider, waiting_for_buyer or none"
            },
            {
                "name": "status",
                "description": "Candidacy status"
            },
            {
                "name": "opening_ciphertext",
                "description": "The key of the job that the offer is for"
            },
            {
                "name": "ctime_epoch",
                "description": "Time of creation"
            },
            {
                "name": "contractor_ciphertext",
                "description": "Contractor's key"
            },
            {
                "name": "opening_title",
                "description": "Job title"
            },
            {
                "name": "client.company_ref",
                "description": "Company reference"
            },
            {
                "name": "client.company_name",
                "description": "Company name"
            }
        ],
        "scope": "View your job applications",
        "nickname": "listContractorJobApplications",
        "method": "GET"
    },
    "/api/otask/v1/tasks/companies/{company_id}/teams/{team_id}/tasks/{code}.{format}:PUT": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_id",
                "description": "The company ID. Use the `parent_team__id` value from the 'Get teams' API call."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "team_id",
                "description": "The team ID."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "code",
                "description": "An activity tracking code being updated."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "description",
                "description": "The description of the code being added."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "url",
                "description": "The location where more info on the code can be found (the URL can be used to direct the user to more info about the code being entered)."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "engagements",
                "description": "A list of engagements that are to be assigned to the created activity. It can be a single engagement ID, or a semicolon (';') separated list of IDs."
            },
            {
                "enum": [
                    "0",
                    "1"
                ],
                "name": "all_in_company",
                "defaultValue": "0",
                "required": false,
                "type": "integer",
                "paramType": "query",
                "description": "If set to `1`, then the created activity is assigned to all engagements that exist in the company at the moment."
            }
        ],
        "notes": "The description and URL of the activity can be updated.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "No access to company",
                "code": 403
            },
            {
                "message": "No access to team",
                "code": 403
            }
        ],
        "summary": "Update activity at team level.",
        "scope": "Modify task codes",
        "nickname": "updateTeamTask",
        "method": "PUT"
    },
    "/api/team/v3/workdiaries/contracts/{contract_id}/{date}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "contract_id",
                "description": "The contract ID."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "date",
                "description": "The target date in `yyyymmdd` format. If absent, it defaults to today."
            },
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "offset",
                "description": "Offset in seconds to support the different time zones."
            }
        ],
        "notes": "The Work Diary method retrieves all snapshots from a single user account within a single day. Keep in mind that a day is dependent on server time and not the day in which the query is made. Make sure to test with various locations before you're done.'",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "Bad Request",
                "code": 400
            }
        ],
        "summary": "Get Work Diary by Contract.",
        "outputFields": [
            {
                "name": "snapshots.assignment.id",
                "description": "Contract ID"
            },
            {
                "name": "snapshots.user.uid",
                "description": "User ID"
            },
            {
                "name": "snapshots.user.first_name",
                "description": "Last name"
            },
            {
                "name": "snapshots.user.portrait_url",
                "description": "Portrait URL"
            },
            {
                "name": "snapshots.user.timezone",
                "description": "Timezone"
            },
            {
                "name": "snapshots.user.timezone_offset",
                "description": "Timezone offset"
            },
            {
                "name": "snapshots.user.archiving_time",
                "description": "Archiving time"
            },
            {
                "name": "snapshots.snapshots.cell_time",
                "description": "Cell timestamp"
            },
            {
                "name": "snapshots.snapshots.time",
                "description": "Snapshot timestamp"
            },
            {
                "name": "snapshots.snapshots.billing_status",
                "description": "Billing status"
            },
            {
                "name": "snapshots.snapshots.allow_edit",
                "description": "Flag inticates the allowance to edit"
            },
            {
                "name": "snapshots.snapshots.activity",
                "description": "Flag indicates the level of activity"
            },
            {
                "name": "snapshots.snapshots.memo",
                "description": "Memo"
            },
            {
                "name": "snapshots.snapshots.task.id",
                "description": "ID"
            },
            {
                "name": "snapshots.snapshots.task.description",
                "description": "Description"
            },
            {
                "name": "snapshots.snapshots.mouse_events_count",
                "description": "Mouse events"
            },
            {
                "name": "snapshots.snapshots.keyboard_events_count",
                "description": "Keyboard events"
            },
            {
                "name": "snapshots.snapshots.computer_name",
                "description": "computer_name"
            },
            {
                "name": "snapshots.snapshots.active_window_title",
                "description": "Active window title"
            },
            {
                "name": "snapshots.snapshots.flags.hide_screenshots",
                "description": "Flag indicates hidden screenshot"
            },
            {
                "name": "snapshots.snapshots.flags.downsample_screenshots",
                "description": "Flag indicates downsaples"
            },
            {
                "name": "snapshots.snapshots.has_screenshot",
                "description": "Flag indicates if the cell has a screenshot"
            },
            {
                "name": "snapshots.snapshots.screenshot_url",
                "description": "Screenshot URL"
            },
            {
                "name": "snapshots.snapshots.screenshot_img",
                "description": "Screenshot image"
            },
            {
                "name": "snapshots.snapshots.screenshot_img_med",
                "description": "Medium screenshot image"
            },
            {
                "name": "snapshots.snapshots.screenshot_img_thmb",
                "description": "Screenshot thumbnail"
            },
            {
                "name": "snapshots.snapshots.has_webcam",
                "description": "Flag indicates if webcam image exists"
            },
            {
                "name": "snapshots.snapshots.webcam_url",
                "description": "Webcam URL"
            },
            {
                "name": "snapshots.snapshots.webcam_img",
                "description": "Webcam image"
            },
            {
                "name": "snapshots.snapshots.webcam_img_thmb",
                "description": "Webcam thumbnail"
            },
            {
                "name": "snapshots.snapshots.status",
                "description": "Status"
            }
        ],
        "scope": "View your workdiary",
        "nickname": "getWorkdiaryByContract",
        "method": "GET"
    },
    "/api/messages/v3/{company_user_id}/rooms.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_user_id",
                "description": "The company ID or team ID, or user ID. Use 'List companies' or 'List teams' API calls to get the team/company IDs."
            },
            {
                "name": "format",
                "paramType": "path",
                "required": false,
                "type": "string",
                "defaultValue": "json",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "boolean",
                "name": "sortOrder",
                "description": "Specifies the sort order of the returned rooms. As of 7/29/2014, the valid values are `alphabetical` and `recentTimestamp` (the newest first). Default: alphabetical (by room name)."
            },
            {
                "enum": [
                    "all",
                    "GROUP",
                    "ONE_ON_ONE",
                    "INTERVIEW"
                ],
                "name": "type",
                "defaultValue": "all",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "Specifies a filter by type for the list of rooms."
            },
            {
                "name": "limit",
                "paramType": "query",
                "required": false,
                "type": "integer",
                "defaultValue": "100",
                "description": "The maximum number of results to be returned. Used only for paginating through the result set. Maximum value: allowed: `1000`."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "activeSince",
                "description": "Indicates to return only the rooms that have had new activity since the given time, as well as favorites (which are treated as always active)."
            },
            {
                "enum": [
                    "true",
                    "false"
                ],
                "name": "includeFavoritesIfActiveSinceSet",
                "defaultValue": "true",
                "required": false,
                "type": "boolean",
                "paramType": "query",
                "description": "Indicates to include all favorite rooms, regardless of when the last activity in those rooms took place. Ignored if `activeSince` parameter is not set."
            },
            {
                "enum": [
                    "true",
                    "false"
                ],
                "name": "includeUnreadIfActiveSinceSet",
                "defaultValue": "true",
                "required": false,
                "type": "boolean",
                "paramType": "query",
                "description": "Indicates to include all rooms that have unread stories, regardless of when the last activity in those rooms took place. Ignored if `activeSince` parameter is not set."
            },
            {
                "name": "locale",
                "paramType": "query",
                "required": false,
                "type": "string",
                "defaultValue": "en_US",
                "description": "When getting rooms for a user, the latest story is returned. This is the locale used for the latest story."
            },
            {
                "enum": [
                    "true",
                    "false"
                ],
                "name": "returnUsers",
                "paramType": "query",
                "required": false,
                "type": "boolean",
                "description": "Indicates to return the users for the room too. Default: don't return the users."
            },
            {
                "enum": [
                    "true",
                    "false"
                ],
                "name": "includeHidden",
                "defaultValue": "true",
                "required": false,
                "type": "boolean",
                "paramType": "query",
                "description": "When set to false, it returns rooms which are not hidden, otherwise it returns all the rooms.  Valid values are: true, false."
            },
            {
                "enum": [
                    "true",
                    "false"
                ],
                "name": "returnUserRoles",
                "defaultValue": "true",
                "required": false,
                "type": "boolean",
                "paramType": "query",
                "description": "Indicates whether or not the information about user roles should be fetched from the permissions service and returned in the response."
            }
        ],
        "notes": "Gets the rooms for the current user and organization.",
        "responseMessages": [
            {
                "message": "Bad Request",
                "code": 400
            },
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "Retrieve rooms information.",
        "outputFields": [
            {
                "name": "rooms.roomId",
                "description": "The ID of the room"
            },
            {
                "name": "rooms.orgId",
                "description": "The ID of the org that the room belongs to"
            },
            {
                "name": "rooms.roomName",
                "description": "The name of the room"
            },
            {
                "name": "rooms.roomType",
                "description": "The room type"
            },
            {
                "name": "rooms.topic",
                "description": "The topic of the room"
            },
            {
                "name": "rooms.numUnread",
                "description": "The number of unread messages in the room for the current user"
            },
            {
                "name": "rooms.numUnreadMentions",
                "description": "The number of unread messages with @ mentions in the room for the current user"
            },
            {
                "name": "rooms.numUsers",
                "description": "The number of users in the room"
            },
            {
                "name": "rooms.isFavorite",
                "description": "Indicates whether the user marked the room as a favorite or not"
            },
            {
                "name": "rooms.latestStory.created",
                "description": "The creation timestamp of the story"
            },
            {
                "name": "rooms.latestStory.updated",
                "description": "The update timestamp of the story"
            },
            {
                "name": "rooms.users.userId",
                "description": "The ID of the user"
            },
            {
                "name": "rooms.users.orgId",
                "description": "The ID of the org (company context) that the user is subscribed with"
            },
            {
                "name": "rooms.users.role",
                "description": "Role of the user. Returned only if returnUserRoles is set"
            },
            {
                "name": "rooms.cursor",
                "description": "The ID of the last room returned in the call"
            },
            {
                "name": "rooms.total",
                "description": "The total number of matching rooms, for paging purposes"
            },
            {
                "name": "rooms.appId",
                "description": "Unique application ID"
            }
        ],
        "scope": "Get rooms for the current user and organization",
        "nickname": "messagesRooms",
        "method": "GET"
    },
    "/api/team/v1/snapshots/{company_id}/{username}/{timestamp}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_id",
                "description": "The company ID."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "username",
                "description": "The username of the target user account."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "timestamp",
                "description": "The timestamp either in UTC according to ISO 8601 (yyyymmddTHHMMSSZ) or as a UNIX timestamp (number of seconds after epoch). If absent, it defaults to the current time. If an exact timestamp match is not found, then the latest snapshot during the current and the previous 10 minute slots (i.e. up to 20 minutes past) is returned. If no activity is found in this time range, a snapshot with PRIVATE status is returned."
            },
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "Gets a specific snapshot",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden (user is not invited to specified company)",
                "code": 403
            }
        ],
        "summary": "Get snapshot.",
        "scope": "View your workdiary",
        "nickname": "getSnapshot",
        "method": "GET"
    },
    "/api/auth/v1/info.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "This API call returns detailed information about the currently authenticated user.",
        "responseMessages": [
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "Get authenticated user info.",
        "scope": "Access your basic info",
        "nickname": "get-auth-user-info",
        "method": "GET"
    },
    "/gds/timereports/v1/providers/{user_id}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "user_id",
                "description": "The freelancer's user ID. This should be the username of the authenticated user."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tq",
                "description": "The Google query. This should be the valid expression in Upwork Google Data Source Language. Fields that cannot appear in the query: `provider_id`, `provider_name`, `charges`, `charges_online`, `charges_offline`. Example: `tq=SELECT worked_on, assignment_team_id, hours, task, memo WHERE worked_on > '2009-10-01' AND worked_on <= '2009-10-31'`."
            },
            {
                "enum": [
                    "out:xml",
                    "out:json",
                    "out:csv"
                ],
                "name": "tqx",
                "defaultValue": "out:json",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The return format. It can be in either XML, JSON or CSV formatting. JSON is returned by default. Example: `tqx=out:xml`."
            }
        ],
        "notes": "This call allows callers to generate time reports for themselves, including monetary information. The caller must be the freelancer himself.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Access denied (user has not enough team/company permissions)",
                "code": 200
            },
            {
                "message": "Invalid query",
                "code": 200
            },
            {
                "message": "Other (in case of CUSTOM_ERROR exception)",
                "code": 200
            }
        ],
        "summary": "Get freelancer specific reports.",
        "scope": "Generate time and financial reports for your companies and teams",
        "nickname": "getTimeReportProvider",
        "method": "GET"
    },
    "/gds/finreports/v2/buyer_teams/{buyer_team_ref}/earnings:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "buyer_team_ref",
                "description": "The reference ID of the team the authenticated user has access to. The authenticated user must be an admin or a staffing manager of the team.\u00a0Use Companies & Teams resource to get it."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tq",
                "description": "The Google query. This should be the valid expression in Upwork Google Data Source Language. Example: `tq=SELECT amount WHERE date >= '2009-10-01' AND date <= '2009-10-31' AND provider__id = 'jsmith'`."
            },
            {
                "enum": [
                    "out:xml",
                    "out:json",
                    "out:csv"
                ],
                "name": "tqx",
                "defaultValue": "out:json",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The return format. It can be in either XML, JSON or CSV formatting. JSON is returned by default. Example: `tqx=out:xml`."
            }
        ],
        "notes": "This call allows hiring managers of a team to see what they pay to their freelancers. Disallowed fields: none. Supported filters: `date`, `week`, `month`, `year`, `date_due`, `provider_team__reference`, `provider_team__id`, `provider__reference`, `provider__id`, `assignment__reference`, `type`, `subtype`, `po_number`. Permissions: hiring.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "User has not enough permissions",
                "code": 200
            },
            {
                "message": "Invalid query",
                "code": 200
            },
            {
                "message": "Other (in case of CUSTOM_ERROR exception)",
                "code": 200
            }
        ],
        "summary": "Get earning reports for a client's team.",
        "scope": "Generate time and financial reports for your companies and teams",
        "nickname": "getEarningsReportClientTeam",
        "method": "GET"
    },
    "/api/hr/v4/contractors/applications.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "integer",
                "name": "company_reference",
                "description": "The reference ID of a team. It allows getting applications for a specific team. Example: `34567`. Use 'List Teams' API call to get it."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "job_key",
                "description": "Filter job results by a specific job(s). Use `,` as a delimiter to specify a couple jobs. Example: `~01d54a7xxxxx125731`."
            },
            {
                "enum": [
                    "active",
                    "submitted",
                    "archived"
                ],
                "name": "status",
                "paramType": "query",
                "required": false,
                "type": "string",
                "description": "Filter by status."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "cursor",
                "description": "Pagination cursor returned as an `offset` value in the previous request."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "integer",
                "name": "cursor_limit",
                "description": "The maximum amount of records to be returned."
            }
        ],
        "notes": "This call lists all job applications made by a freelancer.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "Internal Server Error",
                "code": 500
            }
        ],
        "summary": "List job applications as a freelancer.",
        "outputFields": [
            {
                "name": "applicationUID",
                "description": "Application ID"
            },
            {
                "name": "vendorUID",
                "description": "UID of an applied person"
            },
            {
                "name": "vendorOrgUID",
                "description": "The UID of the organization to which the applied person belongs"
            },
            {
                "name": "openingUID",
                "description": "Job UID"
            },
            {
                "name": "terms.chargeRate.amount",
                "description": "The amount charged (hour rate or whole price in case of fixed price contracts)"
            },
            {
                "name": "terms.chargeRate.currency",
                "description": "Currency"
            },
            {
                "name": "terms.duration",
                "description": "Duration of the engagement"
            },
            {
                "name": "terms.upfrontPaymentPercent",
                "description": "Percent of the upfront payment for fixed price jobs"
            },
            {
                "name": "coverLetter",
                "description": "Text of cover letter"
            },
            {
                "name": "questionsAnswers",
                "description": "Information about questions and answers provided on the job application"
            },
            {
                "name": "attachment.link",
                "description": "Link to the attachment"
            },
            {
                "name": "attachment.attachmentUID",
                "description": "UID of the attachment related to the job application"
            },
            {
                "name": "attachments.link",
                "description": "Link to an attachment"
            },
            {
                "name": "attachments.attachmentUID",
                "description": "UID of an attachment related to the job application"
            },
            {
                "name": "applyingAs",
                "description": "Context under which the job application was made: \"freelancer\" or \"agency\""
            },
            {
                "name": "status",
                "description": "Current status of the job application"
            },
            {
                "name": "withdrawReason.rid",
                "description": "RID of a withdraw reason"
            },
            {
                "name": "withdrawReason.otherReason",
                "description": "Explanation of the reason in case \u201cwithdraw reason\u201d is \u201cother\u201d"
            },
            {
                "name": "withdrawReason.message",
                "description": "Message of a withdraw reason"
            },
            {
                "name": "auditDetails.createdTs",
                "description": "Timestamp when the job application was created"
            },
            {
                "name": "auditDetails.modifiedTs",
                "description": "Timestamp when the job application was last updated"
            },
            {
                "name": "hidden",
                "description": "Flag to identicate if the job application is hidden"
            },
            {
                "name": "dashroomUID",
                "description": "UID of a Dash room provided when client messaged a freelancer"
            },
            {
                "name": "openingCiphertext",
                "description": "The job ciphertext linked with the proper openingUID"
            }
        ],
        "nickname": "getContractorJobApplications",
        "method": "GET"
    },
    "/api/otask/v1/tasks/companies/{company_id}/teams/{team_id}/tasks.{format}:POST": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_id",
                "description": "The company ID. Use the `parent_team__id` value from the 'Get teams' API call."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "team_id",
                "description": "The team ID."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "code",
                "description": "An activity tracking code (this defines the activity tracking code)."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "description",
                "description": "The description of the code being added."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "url",
                "description": "The location where more info on the code can be found (the URL can be used to direct the user to more info about the code being entered)."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "engagements",
                "description": "A list of engagements that are to be assigned to the created activity. It can be a single engagement ID, or a semicolon (';') separated list of IDs."
            },
            {
                "enum": [
                    "0",
                    "1"
                ],
                "name": "all_in_company",
                "defaultValue": "0",
                "required": false,
                "type": "integer",
                "paramType": "query",
                "description": "If set to `1`, then the created activity is assigned to all engagements that exist in the company at the moment."
            }
        ],
        "notes": "A user needs to have hiring manager privileges within the team in order to create an activity at team level.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "No access to company",
                "code": 403
            },
            {
                "message": "No access to team",
                "code": 403
            }
        ],
        "summary": "Create a new activity at team level.",
        "scope": "Modify task codes",
        "nickname": "createTeamTask",
        "method": "POST"
    },
    "/api/profiles/v1/metadata/tests.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "Returns a list of available tests at Upwork.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Bad request",
                "code": 400
            }
        ],
        "summary": "List tests.",
        "scope": "Read and search profiles of contractors and jobs, and get lists of public metadata",
        "nickname": "listMetadataTests",
        "method": "GET"
    },
    "/api/offers/v1/contractors/offers.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "enum": [
                    "accepted",
                    "new",
                    "declined",
                    "expired",
                    "withdrawn",
                    "cancelled",
                    "changed"
                ],
                "name": "status",
                "defaultValue": "new",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The current status of the offer. By default only offers with status `new` are returned."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "page",
                "description": "Pagination, formed as `$offset;$count`. Example: `page=20;10`."
            }
        ],
        "notes": "This call retrieves a list of offers received by a freelancer.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "List freelancer's offers",
        "outputFields": [
            {
                "name": "rid",
                "description": "Offer ID"
            },
            {
                "name": "client_user_ref",
                "description": "Client reference ID"
            },
            {
                "name": "client_org_ref",
                "description": "Client's organization reference ID"
            },
            {
                "name": "contractor_user_ref",
                "description": "Contractor reference ID"
            },
            {
                "name": "contractor_org_ref",
                "description": "Contractor's organization reference ID"
            },
            {
                "name": "title",
                "description": "Offer Title"
            },
            {
                "name": "type",
                "description": "Offer type. Can be either 'hourly' or 'fixed'"
            },
            {
                "name": "last_event_state",
                "description": "Status of the offer. Status can be 'accepted', 'new', 'declined', 'expired', 'withdrawn', 'cancelled' and 'changed'"
            },
            {
                "name": "is_visible_to_contractor",
                "description": "Flag to identify contractor visibility to the offer"
            },
            {
                "name": "job_posting_ref",
                "description": "Relevant job key"
            },
            {
                "name": "terms_data.charge_weekly_stipend_amount",
                "description": "Weekly charge amount according to terms"
            },
            {
                "name": "terms_data.charge_rate",
                "description": "Charge rate according to terms"
            },
            {
                "name": "terms_data.charge_amount",
                "description": "Charge amount according to terms"
            },
            {
                "name": "terms_data.charge_upfront_percent",
                "description": "Charge upfront percent according to terms"
            },
            {
                "name": "terms_data.start_date",
                "description": "Start date according to terms"
            },
            {
                "name": "terms_data.type",
                "description": "Type of work according to terms"
            },
            {
                "name": "terms_data.weekly_limit",
                "description": "Weekly limit for hourly job according to terms"
            },
            {
                "name": "terms_data.manual_time_allowed",
                "description": "Flag identicating if manual time is allowed according to terms"
            },
            {
                "name": "milestones.deposit_amount",
                "description": "Deposit amount"
            },
            {
                "name": "milestones.description",
                "description": "Milestone description"
            },
            {
                "name": "milestones.due_date",
                "description": "Milestone ETA"
            },
            {
                "name": "milestones.state",
                "description": "Milestone state. Possible values are: `not_funded`, `in_offer`, `active`, `submitted`, `rejected`, `rejected_by_odesk`, `paid`, `paid_by_odesk`, `not_funded_closed`, `cancelled_by_client`, `cancelled_by_contractor`, `offer_cancelled`"
            },
            {
                "name": "milestones.id",
                "description": "Unique milestone ID"
            }
        ],
        "scope": "View your job offers",
        "nickname": "listContractorOffers",
        "method": "GET"
    },
    "/api/hr/v2/users/{user_reference}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "user_reference",
                "description": "The reference ID of the user or special value `me` to get information about the currently authenticated user. Examples: `me`, `33333`."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "This API call returns details about the referenced user.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "Get referenced user info.",
        "scope": "View the structure of your companies/teams",
        "nickname": "hrGetUserInfo",
        "method": "GET"
    },
    "/api/hr/v2/companies/{company_reference}/teams.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "integer",
                "name": "company_reference",
                "description": "The reference ID of the company. It can be found using `List companies` API call."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "Returns a list of teams within the company being referenced (as long as the user has access to the referenced company).",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "Get specific company with teams information.",
        "outputFields": [
            {
                "name": "reference",
                "description": "Company reference"
            },
            {
                "name": "name",
                "description": "Company name"
            },
            {
                "name": "payment_verification_status",
                "description": "Payment verified"
            },
            {
                "name": "parent_team__id",
                "description": "Parent team ID"
            },
            {
                "name": "company_name",
                "description": "Parent company name"
            },
            {
                "name": "parent_team__name",
                "description": "Parent team name"
            },
            {
                "name": "company__reference",
                "description": "Parent company reference"
            },
            {
                "name": "parent_team__reference",
                "description": "Parent team reference"
            },
            {
                "name": "id",
                "description": "Team ID"
            }
        ],
        "scope": "View the structure of your companies/teams",
        "nickname": "hrGetCompanyTeams",
        "method": "GET"
    },
    "/api/hr/v2/contracts/{contract_reference}/suspend.{format}:PUT": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "contract_reference",
                "description": "The reference ID of the contract. It's the engagement reference ID."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "message",
                "description": "A message for the contractor."
            }
        ],
        "notes": "This call allows you to suspend a contract.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "Suspend a contract",
        "scope": "Close your contracts",
        "nickname": "hrSuspendContract",
        "method": "PUT"
    },
    "/api/hr/v2/engagements/{engagement_reference}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "integer",
                "name": "engagement_reference",
                "description": "The reference ID of the engagement."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "This call retrieves details about a specific engagement.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "Wrongly requested data",
                "code": 400
            }
        ],
        "summary": "Get engagement.",
        "outputFields": [
            {
                "name": "hired_by",
                "description": "ID of the person who hired"
            },
            {
                "name": "engagement_start_ts",
                "description": "Contract's start date and time"
            },
            {
                "name": "engagement_end_ts",
                "description": "Contract's end date and time"
            },
            {
                "name": "weekly_salary_pay_amount",
                "description": "Weekly salary"
            },
            {
                "name": "hourly_charge_rate",
                "description": "Hourly charge rate"
            },
            {
                "name": "weekly_stipend_hours",
                "description": "Weekly Stipend Hours"
            },
            {
                "name": "provider__id",
                "description": "Username of freelancer"
            },
            {
                "name": "is_paused",
                "description": "Is contract paused"
            },
            {
                "name": "offer_id",
                "description": "Related offer reference"
            },
            {
                "name": "offer_description",
                "description": "Offer description"
            },
            {
                "name": "job_application_ref",
                "description": "Related job application reference"
            },
            {
                "name": "cj_job_application_uid",
                "description": "Related job application unique ID"
            },
            {
                "name": "buyer_team__reference",
                "description": "Client's team reference"
            },
            {
                "name": "engagement_end_date",
                "description": "Contract's end date"
            },
            {
                "name": "created_time",
                "description": "Date/time of contract creation"
            },
            {
                "name": "hourly_pay_rate",
                "description": "Pay rate of contractor for hourly contract"
            },
            {
                "name": "engagement_start_date",
                "description": "Contract's start date"
            },
            {
                "name": "buyer_team__id",
                "description": "Client's team id (username)"
            },
            {
                "name": "weekly_salary_charge_amount",
                "description": "Weekly stipend amount"
            },
            {
                "name": "provider_team__id",
                "description": "Client's team company id (username)"
            },
            {
                "name": "status",
                "description": "Contract's status"
            },
            {
                "name": "engagement_title",
                "description": "Contract's title"
            },
            {
                "name": "provider__reference",
                "description": "Contractor's reference id"
            },
            {
                "name": "reference",
                "description": "Reference of engagement"
            },
            {
                "name": "weekly_hours_limit",
                "description": "# of hours contractor can work for per week"
            },
            {
                "name": "engagement_job_type",
                "description": "Job type of the contract"
            },
            {
                "name": "job__title",
                "description": "Job title"
            },
            {
                "name": "provider__name",
                "description": "Contractor name"
            },
            {
                "name": "provider_team__name",
                "description": "Agency team name"
            },
            {
                "name": "buyer_team__name",
                "description": "Client team name"
            },
            {
                "name": "buyer_company__name",
                "description": "Client company name"
            },
            {
                "name": "provider_company__name",
                "description": "Agency company name"
            },
            {
                "name": "is_suspended",
                "description": "Is contract suspended"
            },
            {
                "name": "buyer_company__reference",
                "description": "Client's company reference"
            },
            {
                "name": "fixed_charge_amount_agreed",
                "description": "FP amount agreed, charge"
            },
            {
                "name": "fixed_price_upfront_payment",
                "description": "FP upfront payment percent value"
            },
            {
                "name": "job_ref_ciphertext",
                "description": "Job's profile ID"
            },
            {
                "name": "dev_recno_ciphertext",
                "description": "Contractor's profile ciphertext"
            },
            {
                "name": "portrait_url",
                "description": "Provider's portrait URL"
            },
            {
                "name": "is_autopaused",
                "description": "Indicates if the job is autopaused"
            },
            {
                "name": "category_uid",
                "description": "Offer category UID"
            },
            {
                "name": "category_name",
                "description": "Offer category name"
            },
            {
                "name": "estimated_start_date",
                "description": "Contract's estimated start date"
            },
            {
                "name": "estimated_end_date",
                "description": "Contract's estimated end date"
            },
            {
                "name": "feedback.feedback_for_buyer.score",
                "description": "Feedback score"
            },
            {
                "name": "feedback.feedback_for_provider.score",
                "description": "Feedback score"
            },
            {
                "name": "milestones.deposit_amount",
                "description": "Deposit amount"
            },
            {
                "name": "milestones.description",
                "description": "Milestone description"
            },
            {
                "name": "milestones.due_date",
                "description": "Milestone ETA"
            },
            {
                "name": "milestones.state",
                "description": "Current state. Possible values are: `paid`, `active`, `not funded`"
            },
            {
                "name": "milestones.id",
                "description": "Unique milestone ID"
            }
        ],
        "scope": "View your contracts",
        "nickname": "hrGetEngagement",
        "method": "GET"
    },
    "/api/team/v1/snapshots/{company_id}/{username}/{timestamp}.{format}:PUT": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_id",
                "description": "The company ID."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "username",
                "description": "The username of the target user account."
            },
            {
                "paramType": "path",
                "required": false,
                "type": "string",
                "name": "timestamp",
                "description": "The timestamp either in UTC according to ISO 8601 (yyyymmddTHHMMSSZ) or as a UNIX timestamp (number of seconds after epoch). If absent, it defaults to the current time. More than one timestamps can be specified either as a range or as a list of values. For timestamp range use the comma character (','). Example: `20081205T090351Z,20081205T091853Z`. For list of timestamps, use the semicolon character (';'), example: `20081205T090351Z;20081405T090851Z;20081705T091853Z`."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "memo",
                "description": "The Memo of the snapshot."
            }
        ],
        "notes": "Updates a spefic snapshot. If the `timestamp` path parameter is not specified, the snapshot for 'now' is updated. Several snapshots can be updated as well, see the `timestamp` parameter description.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden (user is not invited to specified company)",
                "code": 403
            }
        ],
        "summary": "Update snapshot memo.",
        "scope": "Modify your workdiary",
        "nickname": "updateSnapshot",
        "method": "PUT"
    },
    "/gds/timereports/v1/companies/{company_id}/agencies/{agency_id}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_id",
                "description": "The company ID. Use Companies & Teams resource to get it."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "agency_id",
                "description": "The agency ID (Agencies are freelancer accounts that can add team members to projects for the agency\u2019s clients). Use Companies & Teams resource to get it, particularly, Get Teams API."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tq",
                "description": "The Google query. This should be the valid expression in Upwork Google Data Source Language. Fields that cannot appear in the query: `agency_id`, `agency_name`, `charges`, `charges_online`, `charges_offline`. Example: `tq=SELECT week_worked_on, assignment_team_id, provider_id, assignment_name, sum(hours) WHERE worked_on > '2009-10-01' AND worked_on <= '2009-10-31'`."
            },
            {
                "enum": [
                    "out:xml",
                    "out:json",
                    "out:csv"
                ],
                "name": "tqx",
                "defaultValue": "out:json",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The return format. It can be in either XML, JSON or CSV formatting. JSON is returned by default. Example: `tqx=out:xml`."
            }
        ],
        "notes": "Time reports can be generated for an agency. In order to use this call the authorized user needs staffing manager permissions to the agency.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Access denied (user has not enough team/company permissions)",
                "code": 200
            },
            {
                "message": "Invalid query",
                "code": 200
            },
            {
                "message": "Other (in case of CUSTOM_ERROR exception)",
                "code": 200
            }
        ],
        "summary": "Get agency specific reports.",
        "scope": "Generate time and financial reports for your companies and teams",
        "nickname": "getTimeReportAgency",
        "method": "GET"
    },
    "/api/hr/v3/fp/milestones/{milestone_id}.{format}:DELETE": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "name": "milestone_id",
                "allowMultiple": false,
                "required": true,
                "type": "integer",
                "paramType": "path",
                "description": "Milestone reference."
            }
        ],
        "notes": "This API call allows a Hiring Manager to delete a milestone. Note that the user must be authorized in Upwork and must be a Hiring Manager in the team to be able to delete the milestone. Only milestondes with status `not_funded` can be deleted.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "No recruiter or hiring manager permissions",
                "code": 403
            },
            {
                "message": "No access to team/company",
                "code": 403
            },
            {
                "message": "Invalid state '{state}'",
                "code": 400
            }
        ],
        "summary": "Delete the milestone.",
        "scope": "Modify milestones and submissions on your behalf",
        "nickname": "deleteMilestone",
        "method": "DELETE"
    },
    "/api/profiles/v1/metadata/specialties.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "topic",
                "description": "Category or Topic ID, which can be received using List Categories (V2) API"
            }
        ],
        "notes": "Returns a list of specialties available for a specific topic, which you can get using List Categories (V2) API.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Bad request",
                "code": 400
            }
        ],
        "summary": "List specialties.",
        "outputFields": null,
        "scope": "Read and search profiles of contractors and jobs, and get lists of public metadata",
        "nickname": "listMetadataSpecialties",
        "method": "GET"
    },
    "/gds/timereports/v2/companies/{company_id}/agencies/{agency_id}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_id",
                "description": "The company ID. Use Companies & Teams resource to get it."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "agency_id",
                "description": "The agency ID. (Agencies are freelancer accounts that can add team members to projects for the agency\u2019s clients). Use Companies & Teams resource to get it, particularly, Get Teams API."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tq",
                "description": "The Google query. This should be the valid expression in Upwork Google Data Source Language. Fields that cannot appear in the query: `agency_id`, `agency_name`, `charges`, `charges_online`, `charges_offline`. Example: `tq=SELECT week_worked_on, assignment_team_id, provider_id, assignment_name, sum(hours) WHERE worked_on > '2009-10-01' AND worked_on <= '2009-10-31'`."
            },
            {
                "enum": [
                    "out:xml",
                    "out:json",
                    "out:csv"
                ],
                "name": "tqx",
                "defaultValue": "out:json",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The return format. It can be in either XML, JSON or CSV formatting. JSON is returned by default. Example: `tqx=out:xml`."
            }
        ],
        "notes": "Time reports can be generated for an agency. In order to use this call the authorized user needs staffing manager permissions to the agency.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Access denied (user has not enough team/company permissions)",
                "code": 200
            },
            {
                "message": "Invalid query",
                "code": 200
            },
            {
                "message": "Other (in case of CUSTOM_ERROR exception)",
                "code": 200
            }
        ],
        "summary": "Get agency specific reports.",
        "scope": "Generate time and financial reports for your companies and teams",
        "nickname": "getTimeReportAgency",
        "method": "GET"
    },
    "/api/profiles/v1/metadata/regions.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "Returns a list of county regions.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Bad request",
                "code": 400
            }
        ],
        "summary": "List geographical regions.",
        "scope": "Read and search profiles of contractors and jobs, and get lists of public metadata",
        "nickname": "listMetadataRegions",
        "method": "GET"
    },
    "/api/hr/v2/jobs.{format}:POST": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "buyer_team__reference",
                "description": "The reference ID of the client's team that is posting the job. Example: `34567`. You can get it from List teams API call."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "title",
                "description": "Title of the job. Example: `Development of API ecosystem`"
            },
            {
                "enum": [
                    "hourly",
                    "fixed-price"
                ],
                "name": "job_type",
                "paramType": "query",
                "required": true,
                "type": "string",
                "description": "The type of the job posted."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "description",
                "description": "The job description. Example: `A new interesting start-up requires an API ecosystem`."
            },
            {
                "enum": [
                    "public",
                    "upwork",
                    "invite-only"
                ],
                "name": "visibility",
                "paramType": "query",
                "required": true,
                "type": "string",
                "description": "The visibility of the job. Values description: `public` - the job is available to all users who search for jobs; `upwork` - the job appears in search results only for Upwork users who are logged in; `invite-only` - jobs do not appear in search and are used for jobs where the client wants to control the potential applicants."
            },
            {
                "name": "category2",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "The category of the job according to the list of Categories 2.0. Example: `Web Development`. You can get it via Metadata Category (V2) resource. Required if `specialty` parameter is not specified."
            },
            {
                "name": "subcategory2",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "The subcategory of the job according to the list of Categories 2.0. Example: `Web & Mobile Development`. You can get it via Metadata Category (V2) resource. Required if `specialty` parameter is not specified."
            },
            {
                "name": "specialty",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "The specialty UID of the job according to the list of Specialties. Example: `1110238407677218816`. You can get it via Metadata Category (v2) resource. Required if `skills` parameter is used based on Skills (V2) API response."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "start_date",
                "description": "The start date of the job. If the `start_date` is not included, the job defaults to starting immediately. Example: `06-15-2011`."
            },
            {
                "name": "budget",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "number",
                "description": "The budget for a fixed-price job. Example: `100`."
            },
            {
                "name": "duration",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "integer",
                "description": "The duration of the job in hours. Used for hourly-jobs. Example: `90`."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "skills",
                "description": "The skills required for the job. Use semi-colon ';' to separate the skills."
            },
            {
                "enum": [
                    "individuals",
                    "agencies",
                    "all"
                ],
                "name": "contractor_type",
                "paramType": "query",
                "required": false,
                "type": "string",
                "description": "The preferred type of freelancer."
            }
        ],
        "notes": "This call can be used to post a job.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden (operation is unauthorized)",
                "code": 403
            }
        ],
        "summary": "Post a job.",
        "scope": "Create, modify and remove job posts",
        "nickname": "postJob",
        "method": "POST"
    },
    "/gds/finreports/v2/provider_companies/{provider_company_ref}/earnings:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "provider_company_ref",
                "description": "The reference ID of the company's parent team the authenticated user has access to. The authenticated user must be the owner of the company. Use Teams & Companies resource to get it."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tq",
                "description": "The Google query. This should be the valid expression in Upwork Google Data Source Language. Example: `tq=SELECT amount WHERE date >= '2009-10-01' AND date <= '2009-10-31' AND buyer_company__reference=89089`."
            },
            {
                "enum": [
                    "out:xml",
                    "out:json",
                    "out:csv"
                ],
                "name": "tqx",
                "defaultValue": "out:json",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The return format. It can be in either XML, JSON or CSV formatting. JSON is returned by default. Example: `tqx=out:xml`."
            }
        ],
        "notes": "This call allows freelancer's company owners to know what they are being paid per client for their services, and amounts that remain unpaid, cross multiple accounting entities. Disallowed fields: `comment`, `po_number`. Supported filters: `date`, `week`, `month`, `year`, `date_due`, `buyer_company__reference`, `buyer_company__id`, `buyer_team__reference`, `buyer_team__id`, `provider__reference`, `provider__id`, `assignment__reference`, `accounting_entity__reference`, `type`, `subtype`. Permissions: admin or staffing.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "User has not enough permissions",
                "code": 200
            },
            {
                "message": "Invalid query",
                "code": 200
            },
            {
                "message": "Other (in case of CUSTOM_ERROR exception)",
                "code": 200
            }
        ],
        "summary": "Get earning reports for a freelancer's company.",
        "scope": "Generate time and financial reports for your companies and teams",
        "nickname": "getEarningsReportCompany",
        "method": "GET"
    },
    "/api/v3/oauth2/token:POST": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "authorization_code",
                    "refresh_token"
                ],
                "name": "grant_type",
                "paramType": "query",
                "required": true,
                "type": "string",
                "description": "Grant type. To get a token right after authorization, use `authorization_code`. To refresh an existing token, having a valid `refresh token`, use `refresh_token`."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "client_id",
                "description": "Your Client ID."
            },
            {
                "name": "code",
                "paramType": "query",
                "required": true,
                "conditionallyRequired": true,
                "type": "string",
                "description": "Authorization code received during the authorization request. Required for `authorization_code` grant."
            },
            {
                "name": "redirect_uri",
                "paramType": "query",
                "required": true,
                "conditionallyRequired": true,
                "type": "string",
                "description": "Redirect URI, must be equal or similar to the callback specified in the key settings. Required for `authorization_code` grant."
            },
            {
                "name": "refresh_token",
                "paramType": "query",
                "required": true,
                "conditionallyRequired": true,
                "type": "string",
                "description": "A valid refresh token. Required for `refresh_token` grant."
            }
        ],
        "notes": "HTTPS is required. All the names of variables follow OAuth 2.0 specification (see RFC 6749).",
        "responseMessages": [
            {
                "message": "Bad Request",
                "code": 400
            }
        ],
        "summary": "Get an authentication access and refresh token pair in Authorization Code Grant.",
        "scope": "No special permissions are required",
        "nickname": "get-oauth2-token",
        "method": "POST"
    },
    "/gds/finreports/v2/provider_companies/{provider_company_ref}/billings:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "integer",
                "name": "provider_company_ref",
                "description": "The reference ID of the company's parent team the authenticated user has access to. The authenticated user must be the owner of the company. Use Teams & Companies resource to get it."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tq",
                "description": "The Google query. This should be the valid expression in Upwork Google Data Source Language. Example: `tq=SELECT amount WHERE date >= '2009-10-01' AND date <= '2009-10-31' AND buyer_company__reference=89089`."
            },
            {
                "enum": [
                    "out:xml",
                    "out:json",
                    "out:csv"
                ],
                "name": "tqx",
                "defaultValue": "out:json",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The return format. It can be in either XML, JSON or CSV formatting. JSON is returned by default. Example: `tqx=out:xml`."
            }
        ],
        "notes": "This call allows freelancer company owners to know what clients are paying for their AC services, cross multiple accounting entities. Disallowed fields: `comment`, `po_number`. Supported filters: `date`, `week`, `month`, `year`, `date_due`, `buyer_company__reference`, `buyer_company__id`, `buyer_team__reference`, `buyer_team__id`, `provider__reference`, `provider__id`, `assignment__reference`, `accounting_entity__reference`, `type`, `subtype`. Permissions: owner or admin.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "User has not enough permissions",
                "code": 200
            },
            {
                "message": "Invalid query",
                "code": 200
            },
            {
                "message": "Other (in case of CUSTOM_ERROR exception)",
                "code": 200
            }
        ],
        "summary": "Get billing reports for a freelancer's company.",
        "scope": "Generate time and financial reports for your companies and teams",
        "nickname": "getBillingReportCompany",
        "method": "GET"
    },
    "/api/hr/v3/fp/milestones/{milestone_id}/approve.{format}:PUT": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "name": "milestone_id",
                "allowMultiple": false,
                "required": true,
                "type": "integer",
                "paramType": "path",
                "description": "Milestone reference."
            },
            {
                "name": "amount",
                "allowMultiple": false,
                "required": true,
                "type": "integer",
                "paramType": "query",
                "description": "Amount of money to be paid. If none provided, the full deposit_amount is paid."
            },
            {
                "name": "bonus",
                "allowMultiple": false,
                "required": false,
                "type": "integer",
                "paramType": "query",
                "description": "Amount of money paid as bonus."
            },
            {
                "name": "pay_comments",
                "allowMultiple": false,
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "Comments on the payment."
            },
            {
                "enum": [
                    "329",
                    "330",
                    "331",
                    "332"
                ],
                "name": "underpayment_reason",
                "paramType": "query",
                "required": false,
                "type": "string",
                "allowMultiple": false,
                "description": "Reason for a smaller payment than the one agreed. Values description: `329` - Payment lower due to freelancer performance; `330` - Freelancer is performing well, but the scope of work changed; `331` - Freelancer is performing well, but I decided to make an earlier payment; `332` - Payment is lower for other reasons, but freelancer is performing well."
            },
            {
                "name": "note2contractor",
                "allowMultiple": false,
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "Notes from the client to the freelancer."
            }
        ],
        "notes": "Closes the milestone by paying the deposit amount if no amount is specified.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "No recruiter or hiring manager permissions",
                "code": 403
            },
            {
                "message": "No access to team/company",
                "code": 403
            },
            {
                "message": "Invalid state when approving the milestone: '{state}'",
                "code": 400
            }
        ],
        "summary": "Approve the milestone.",
        "scope": "Modify milestones and submissions on your behalf",
        "nickname": "putApproveMilestone",
        "method": "PUT"
    },
    "/api/auth/v1/oauth/token/request:POST": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "oauth_signature",
                "description": "OAuth signature."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "oauth_consumer_key",
                "description": "A consumer (application) key."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "oauth_nonce",
                "description": "OAuth nonce."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "oauth_timestamp",
                "description": "OAuth timestamp."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "oauth_signature_method",
                "description": "Signature method (persistent constant equal to 'HMAC-SHA1')."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "oauth_callback",
                "description": "Callback URL used after confirming Authorization."
            }
        ],
        "notes": "HTTPS is required. All the names of variables follow OAuth specification (see RFC 5849).",
        "responseMessages": [
            {
                "message": "Failed to validate oauth signature and token",
                "code": 401
            }
        ],
        "summary": "Get an authentication request token.",
        "scope": "No special permissions are required",
        "nickname": "get-request-token",
        "method": "POST"
    },
    "/gds/timereports/v2/companies/{company_id}/teams/{team_id}/hours:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_id",
                "description": "The company ID. Use Companies & Teams resource to get it."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "team_id",
                "description": "The team ID. Use Companies & Teams resource to get it."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tq",
                "description": "The Google query. This should be the valid expression in Upwork Google Data Source Language. Fields that cannot appear in the query: `team_id`, `team_name`, `charges`, `charges_online`, `charges_offline`. Example: `tq=SELECT worked_on, provider_id, provider_name, sum(hours) WHERE worked_on >= '2009-10-01' AND worked_on <= '2009-10-31'`."
            },
            {
                "enum": [
                    "out:xml",
                    "out:json",
                    "out:csv"
                ],
                "name": "tqx",
                "defaultValue": "out:json",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The return format. It can be in either XML, JSON or CSV formatting. JSON is returned by default. Example: `tqx=out:xml`."
            }
        ],
        "notes": "This call generates time report for a team without detailed monetary information (charges, etc.), only information about hours. Note that if the `provider_id` field is present in the query, the caller must be a supervisor of the freelancers. If the `provider_id` is not provided in the query, the caller must have either hiring manager or finance permission to the specified team.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Access denied (user has not enough team/company permissions)",
                "code": 200
            },
            {
                "message": "Invalid query",
                "code": 200
            },
            {
                "message": "Other (in case of CUSTOM_ERROR exception)",
                "code": 200
            }
        ],
        "summary": "Get time reports for a team (hours only).",
        "scope": "Generate time and financial reports for your companies and teams",
        "nickname": "getTimeReportTeamHourly",
        "method": "GET"
    },
    "/api/hr/v2/companies/{company_reference}/users.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "integer",
                "name": "company_reference",
                "description": "The reference ID of the company. It can be found using `List companies` API call."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "Returns a list of all users within the referenced company (only available for users with hiring privileges for the company called). These users may be in different teams, so if you want to see users grouped by teams use the 'List users in team API call'.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "Get specific company with teams information.",
        "outputFields": [
            {
                "name": "id",
                "description": "User ID"
            },
            {
                "name": "reference",
                "description": "User reference"
            },
            {
                "name": "first_name",
                "description": "User's first name"
            },
            {
                "name": "last_name",
                "description": "User's last name"
            },
            {
                "name": "timezone_offset",
                "description": "Offset for user's timezone"
            },
            {
                "name": "public_url",
                "description": "User's public profile url"
            },
            {
                "name": "is_provider",
                "description": "Is it a contractor"
            },
            {
                "name": "has_contract",
                "description": "Flag indicates whether the user has a contract"
            },
            {
                "name": "status",
                "description": "User status in this company"
            }
        ],
        "scope": "View the structure of your companies/teams",
        "nickname": "hrGetCompanyUsers",
        "method": "GET"
    },
    "/api/messages/v3/{company_user_id}/rooms/{room_id}/users/{user_id}.{format}:PUT": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_user_id",
                "description": "The company ID or team ID, or user ID. Use 'List companies' or 'List teams' API calls to get the team/company IDs."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "user_id",
                "description": "The ID of the user."
            },
            {
                "name": "format",
                "paramType": "path",
                "required": false,
                "type": "string",
                "defaultValue": "json",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "lastReadTimestamp",
                "description": "Timestamp of the last time the user accessed the room."
            },
            {
                "enum": [
                    "true",
                    "false"
                ],
                "name": "isFavorite",
                "paramType": "query",
                "required": false,
                "type": "boolean",
                "description": "Indicates whether or not the user marked the room as a favorite."
            },
            {
                "enum": [
                    "true",
                    "false"
                ],
                "name": "isHidden",
                "paramType": "query",
                "required": false,
                "type": "string",
                "description": "Indicates whether or not the room is hidden from the user's left-nav."
            },
            {
                "enum": [
                    "owner",
                    "admin",
                    "participant"
                ],
                "name": "role",
                "paramType": "query",
                "required": false,
                "type": "string",
                "description": "The role of the user in the room."
            }
        ],
        "notes": "Updates a room settings.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "Update a room settings.",
        "scope": "Create a new room, update an existent one or post a message in the room",
        "nickname": "messagesUpdateRoomSettings",
        "method": "PUT"
    },
    "/api/hr/v2/contracts/{contract_reference}.{format}:DELETE": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "contract_reference",
                "description": "The reference ID of the contract. It's the engagement reference ID."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "enum": [
                    "API_REAS_MISREPRESENTED_SKILLS",
                    "API_REAS_CONTRACTOR_NOT_RESPONSIVE",
                    "API_REAS_HIRED_DIFFERENT",
                    "API_REAS_JOB_COMPLETED_SUCCESSFULLY",
                    "API_REAS_WORK_NOT_NEEDED",
                    "API_REAS_UNPROFESSIONAL_CONDUCT"
                ],
                "name": "reason",
                "paramType": "query",
                "required": true,
                "type": "string",
                "description": "The reason key. Reasons descriptions: `API_REAS_MISREPRESENTED_SKILLS` - 'Freelancer misrepresented his/her skills', `API_REAS_CONTRACTOR_NOT_RESPONSIVE` - 'Freelancer not responsive', `API_REAS_HIRED_DIFFERENT` - 'Hired a different freelancer', `API_REAS_JOB_COMPLETED_SUCCESSFULLY` - 'Job was completed successfully', `API_REAS_WORK_NOT_NEEDED` - 'No longer need this work completed', `API_REAS_UNPROFESSIONAL_CONDUCT` - 'Unprofessional conduct'."
            },
            {
                "enum": [
                    "yes",
                    "no"
                ],
                "name": "would_hire_again",
                "paramType": "query",
                "required": true,
                "type": "string",
                "description": "Indicates whether you would hire a freelancer again. Required if the total charge on the contract is $0 (zero dollars). Valid values are: `yes`, `no`."
            },
            {
                "name": "fb_scores",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "Estimate, it could be an array of scores, where ID is reference to the score description. The feedback scores are optional, but if present they must be complete: all scores. Valid array keys for freelancer are: `3` - 'Skills / competency and skills for the job, understanding of specifications/instructions'; `4` - 'Quality / quality of work deliverables'; `5` - 'Availability / online presence on a consistent schedule'; `6` - 'Deadlines / ability to complete tasks on time'; `7` - 'Communication / communication skills, frequent progress updates, responsiveness'; `8` - 'Cooperation / cooperation and flexibility, suggestions for improvement'. Valid array keys for employer are: `9` - 'Skills / competency and skills for the job, understanding of task complexities'; `10` - 'Quality / quality of specifications/instructions'; `11` - 'Availability / online presence on a consistent schedule'; `12` - 'Deadlines / understanding of complexities and trade-offs'; `13` - 'Communication / communication skills and responsiveness, feedback and guidance'; `14` - 'Cooperation / cooperation and flexibility, open to suggestions for improvement'. In the following example 1,2,3,7,8,11 are references, while 5 is the score: `reason=API_REAS_WORK_NOT_NEEDED&would_hire_again=yes&fb_comment=test%20comment&fb_scores[1]=5&fb_scores[2]=5&fb_scores[3]=5&fb_scores[7]=5&fb_scores[8]=5&fb_scores[11]=5`."
            },
            {
                "name": "fb_comment",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "A feedback comment. This comment is optional, but if present, then the scores are required. Example: `This is my nice feedback`."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "integer",
                "name": "fb_private",
                "description": "A private feedback score (from 1 to 11) for freelancer."
            }
        ],
        "notes": "This call allows you to close a contract.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "End contract.",
        "scope": "Close your contracts",
        "nickname": "hrEndContract",
        "method": "DELETE"
    },
    "/gds/timereports/v2/providers/{user_id}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "user_id",
                "description": "The freelancer's user ID. This should be the username of the authenticated user."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tq",
                "description": "The Google query. This should be the valid expression in Upwork Google Data Source Language. Fields that cannot appear in the query: `provider_id`, `provider_name`, `charges`, `charges_online`, `charges_offline`. Example: `tq=SELECT worked_on, assignment_team_id, hours, task, memo WHERE worked_on > '2009-10-01' AND worked_on <= '2009-10-31'`."
            },
            {
                "enum": [
                    "out:xml",
                    "out:json",
                    "out:csv"
                ],
                "name": "tqx",
                "defaultValue": "out:json",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The return format. It can be in either XML, JSON or CSV formatting. JSON is returned by default. Example: `tqx=out:xml`."
            }
        ],
        "notes": "This call allows callers to generate time reports for themselves, including monetary information. The caller must be the freelancer himself.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Access denied (user has not enough team/company permissions)",
                "code": 200
            },
            {
                "message": "Invalid query",
                "code": 200
            },
            {
                "message": "Other (in case of CUSTOM_ERROR exception)",
                "code": 200
            }
        ],
        "summary": "Get freelancer specific reports.",
        "scope": "Generate time and financial reports for your companies and teams",
        "nickname": "getTimeReportProvider",
        "method": "GET"
    },
    "/gds/timereports/v2/providers/{user_id}/hours:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "user_id",
                "description": "The freelancer's user ID. This should be the user ID of the authenticated user."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tq",
                "description": "The Google query. This should be the valid expression in Upwork Google Data Source Language. Fields that cannot appear in the query: `provider_id`, `provider_name`, `charges`, `charges_online`, `charges_offline`. Example: `tq=SELECT worked_on, assignment_team_id, hours, task, memo WHERE worked_on > '2009-10-01' AND worked_on <= '2009-10-31'`."
            },
            {
                "enum": [
                    "out:xml",
                    "out:json",
                    "out:csv"
                ],
                "name": "tqx",
                "defaultValue": "out:json",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The return format. It can be in either XML, JSON or CSV formatting. JSON is returned by default. Example: `tqx=out:xml`."
            }
        ],
        "notes": "This call allows callers to generate time reports for themselves. No monetary fields, such as charges, are supported. The caller must be the freelancer himself.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Access denied (user has not enough team/company permissions)",
                "code": 200
            },
            {
                "message": "Invalid query",
                "code": 200
            },
            {
                "message": "Other (in case of CUSTOM_ERROR exception)",
                "code": 200
            }
        ],
        "summary": "Get freelancer specific reports (hours only).",
        "scope": "Generate time and financial reports for your companies and teams",
        "nickname": "getTimeReportProvider",
        "method": "GET"
    },
    "/api/auth/v1/oauth/token/access:POST": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "oauth_token",
                "description": "The temporary credentials identifier, this is the Request token received in the first step."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "oauth_consumer_key",
                "description": "A consumer (application) key."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "oauth_signature",
                "description": "OAuth signature."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "oauth_nonce",
                "description": "OAuth nonce."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "oauth_timestamp",
                "description": "OAuth timestamp."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "oauth_verifier",
                "description": "OAuth verifier received in the authorization call in the previous step of the oAuth workflow."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "oauth_signature_method",
                "description": "Signature method (persistent constant equal to 'HMAC-SHA1')."
            }
        ],
        "notes": "HTTPS is required. All the names of variables follow OAuth specification (see RFC 5849).",
        "responseMessages": [
            {
                "message": "The consumer_key and token combination does not exist or is not enabled",
                "code": 401
            },
            {
                "message": "OAuth Verification Failed",
                "code": 401
            },
            {
                "message": "Forbidden: oauth_token not found",
                "code": 403
            },
            {
                "message": "Forbidden: oauth_signature not found",
                "code": 403
            },
            {
                "message": "Forbidden: oauth_consumer_key not found",
                "code": 403
            }
        ],
        "summary": "Getting an authentication access token for the given request token.",
        "scope": "No special permissions are required",
        "nickname": "get-access-token",
        "method": "POST"
    },
    "/api/team/v3/workdays/contracts/{contract_id}/{from_date,till_date}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "contract_id",
                "description": "The contract ID or a list of contract IDs, separated by semicolon (';')."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "from_date",
                "description": "The start date in `yyyymmdd` format."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "end_date",
                "description": "The end date in `yyyymmdd` format."
            },
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "offset",
                "description": "Offset in seconds to support the different time zones."
            }
        ],
        "notes": "The Workdays method retrieves all work days within a specific period by contract. Keep in mind that a day is dependent on server time and not the day in which the query is made. Make sure to test with various locations before you're done.'",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "Bad Request",
                "code": 400
            }
        ],
        "summary": "Get Workdays by Contract.",
        "outputFields": [
            {
                "name": "workdays",
                "description": "List of workdays"
            }
        ],
        "scope": "View your workdiary",
        "nickname": "getWorkdaysByContract",
        "method": "GET"
    },
    "/api/otask/v1/tasks/companies/{company_id}/teams/{team_id}/archive/{code}.{format}:PUT": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_id",
                "description": "The company ID. Use the `parent_team__id` value from the 'Get teams' API call."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "team_id",
                "description": "The team ID."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "code",
                "description": "An activity tracking code. It can be the list of codes, separated by ';' (semicolon)."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "If you want to archive activity for company, use the `company_id` value for `team_id` as well.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "No access to company",
                "code": 403
            },
            {
                "message": "No access to team",
                "code": 403
            }
        ],
        "summary": "Archive single activity.",
        "scope": "Modify task codes",
        "nickname": "archiveActivity",
        "method": "PUT"
    },
    "/api/hr/v4/contractors/applications/{application_id}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "integer",
                "name": "application_id",
                "description": "The job application ID."
            },
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "integer",
                "name": "company_reference",
                "description": "The reference ID of a team. It allows getting applications for a specific team. Example: `34567`. Use 'List Teams' API call to get it."
            }
        ],
        "notes": "This call retrieves details about a specific job application made by a freelancer.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "Internal Server Error",
                "code": 500
            }
        ],
        "summary": "Get specific job application as a freelancer.",
        "outputFields": [
            {
                "name": "applicationUID",
                "description": "Application ID"
            },
            {
                "name": "vendorUID",
                "description": "UID of an applied person"
            },
            {
                "name": "vendorOrgUID",
                "description": "The UID of the organization to which the applied person belongs"
            },
            {
                "name": "openingUID",
                "description": "Job UID"
            },
            {
                "name": "terms.chargeRate.amount",
                "description": "The amount charged (hour rate or whole price in case of fixed price contracts)"
            },
            {
                "name": "terms.chargeRate.currency",
                "description": "Currency"
            },
            {
                "name": "terms.duration",
                "description": "Duration of the engagement"
            },
            {
                "name": "terms.upfrontPaymentPercent",
                "description": "Percent of the upfront payment for fixed price jobs"
            },
            {
                "name": "coverLetter",
                "description": "Text of cover letter"
            },
            {
                "name": "questionsAnswers",
                "description": "Information about questions and answers provided on the job application"
            },
            {
                "name": "attachment.link",
                "description": "Link to the attachment"
            },
            {
                "name": "attachment.attachmentUID",
                "description": "UID of the attachment related to the job application"
            },
            {
                "name": "attachments.link",
                "description": "Link to an attachment"
            },
            {
                "name": "attachments.attachmentUID",
                "description": "UID of an attachment related to the job application"
            },
            {
                "name": "applyingAs",
                "description": "Context under which the job application was made: \"freelancer\" or \"agency\""
            },
            {
                "name": "status",
                "description": "Current status of the job application"
            },
            {
                "name": "withdrawReason.rid",
                "description": "RID of a withdraw reason"
            },
            {
                "name": "withdrawReason.otherReason",
                "description": "Explanation of the reason in case \u201cwithdraw reason\u201d is \u201cother\u201d"
            },
            {
                "name": "withdrawReason.message",
                "description": "Message of a withdraw reason"
            },
            {
                "name": "auditDetails.createdTs",
                "description": "Timestamp when the job application was created"
            },
            {
                "name": "auditDetails.modifiedTs",
                "description": "Timestamp when the job application was last updated"
            },
            {
                "name": "hidden",
                "description": "Flag to identicate if the job application is hidden"
            },
            {
                "name": "dashroomUID",
                "description": "UID of a Dash room provided when client messaged a freelancer"
            },
            {
                "name": "openingCiphertext",
                "description": "The job ciphertext linked with the proper openingUID"
            }
        ],
        "nickname": "getContractorJobApplicationByID",
        "method": "GET"
    },
    "/api/messages/v3/{company_user_id}/rooms/contracts/{contract_id}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_user_id",
                "description": "The company ID or team ID, or user ID. Use 'List companies' or 'List teams' API calls to get the team/company IDs."
            },
            {
                "paramType": "path",
                "required": true,
                "type": "integer",
                "name": "contract_id",
                "description": "The ID of the contract to retrieve the room for."
            },
            {
                "name": "format",
                "paramType": "path",
                "required": false,
                "type": "string",
                "defaultValue": "json",
                "description": "Response format."
            },
            {
                "enum": [
                    "true",
                    "false"
                ],
                "name": "onlyRoomId",
                "defaultValue": "false",
                "required": false,
                "type": "boolean",
                "paramType": "query",
                "description": "Indicates whether or not to return only the ID of the matching room."
            }
        ],
        "notes": "Gets the room information for the interview room with the contractId passed on the URL.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "The room does not exist",
                "code": 404
            }
        ],
        "summary": "Get a specific room by contract ID.",
        "outputFields": [
            {
                "name": "roomId",
                "description": "The ID of the room"
            },
            {
                "name": "orgId",
                "description": "The ID of the org that the room belongs to"
            },
            {
                "name": "roomName",
                "description": "The name of the room"
            },
            {
                "name": "roomType",
                "description": "The room type"
            },
            {
                "name": "topic",
                "description": "The topic of the room"
            },
            {
                "name": "lastReadTimestamp",
                "description": "Timestamp of the last time the user accessed the room"
            },
            {
                "name": "recentTimestamp",
                "description": "Timestamp of the latest activity in the room for sorting purposes"
            },
            {
                "name": "isFavorite",
                "description": "Indicates whether the user marked the room as favorite or not"
            },
            {
                "name": "isReadOnly",
                "description": "Indicates whether the room is archived or not"
            },
            {
                "name": "isHidden",
                "description": "Indicates whether the room marked as hidden/archived or not"
            },
            {
                "name": "role",
                "description": "Indicates a role of the user in the particular room"
            },
            {
                "name": "users.userId",
                "description": "The ID of the user"
            },
            {
                "name": "users.orgId",
                "description": "The ID of the org that the user is subscribed with"
            },
            {
                "name": "users.role",
                "description": "The role of the user. Returned only if returnUserRoles is set"
            },
            {
                "name": "stories.stories.storyId",
                "description": "Story ID"
            },
            {
                "name": "stories.stories.created",
                "description": "Indicates when the message was created"
            },
            {
                "name": "stories.stories.updated",
                "description": "Indicates when the message was updated"
            },
            {
                "name": "stories.stories.userId",
                "description": "ID of a user who posted the message"
            },
            {
                "name": "stories.stories.message",
                "description": "Message"
            },
            {
                "name": "stories.stories.isSystemStory",
                "description": "Flag indicates whether the message is system"
            },
            {
                "name": "stories.cursor",
                "description": "Current position of a cursor"
            },
            {
                "name": "stories.total",
                "description": "Total number of messages"
            }
        ],
        "scope": "Gets the rooms for the current user and organization",
        "nickname": "messagesRoomByContractId",
        "method": "GET"
    },
    "/api/team/v3/snapshots/contracts/{contract_id}/{timestamp}.{format}:DELETE": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "contract_id",
                "description": "The contract ID."
            },
            {
                "paramType": "path",
                "required": false,
                "type": "string",
                "name": "timestamp",
                "description": "The timestamp as a UNIX timestamp (number of seconds after epoch)."
            },
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            }
        ],
        "notes": "Only one snapshot can be deleted at a time.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "Delete snapshot.",
        "scope": "Modify your workdiary",
        "nickname": "deleteSnapshot",
        "method": "DELETE"
    },
    "/gds/finreports/v2/providers/{provider_ref}/earnings:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "integer",
                "name": "provider_ref",
                "description": "The reference ID of the freelancer (authenticated user). Use Teams & Companies resource to get it."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "tq",
                "description": "The Google query. This should be the valid expression in Upwork Google Data Source Language. Example: `tq=SELECT amount WHERE date >= '2009-10-01' AND date <= '2009-10-31'`."
            },
            {
                "enum": [
                    "out:xml",
                    "out:json",
                    "out:csv"
                ],
                "name": "tqx",
                "defaultValue": "out:json",
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The return format. It can be in either XML, JSON or CSV formatting. JSON is returned by default. Example: `tqx=out:xml`."
            }
        ],
        "notes": "This call allows freelancers to find out what they are being paid for their services. Disallowed fields: `comment`, `po_number`. Supported filters: `date`, `week`, `month`, `year`, `date_due`, `buyer_company__reference`, `buyer_company__id`, `buyer_team__reference`, `buyer_team__id`, `provider_company__reference`, `provider_company__id`, `assignment__reference`, `type`, `subtype`. Permissions: freelancer.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "User has not enough permissions",
                "code": 200
            },
            {
                "message": "Invalid query",
                "code": 200
            },
            {
                "message": "Other (in case of CUSTOM_ERROR exception)",
                "code": 200
            }
        ],
        "summary": "Get earning reports for a freelancer.",
        "scope": "Generate time and financial reports for your companies and teams",
        "nickname": "getEarningsReportFreelancer",
        "method": "GET"
    },
    "/api/hr/v4/clients/applications.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "integer",
                "name": "buyer_team__reference",
                "description": "The reference ID of the client's team. It allows getting applications for a specific team. Example: `34567`. Use 'List Teams' API call to get it."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "job_key",
                "description": "Filter job results by a specific job(s). Use `,` as a delimiter to specify a couple jobs. Example: `~01d54a7xxxxx125731`."
            },
            {
                "enum": [
                    "Applicants",
                    "Recommended",
                    "Messaged",
                    "Declined",
                    "Withdrawn",
                    "Hidden",
                    "AutoHidden"
                ],
                "name": "status",
                "paramType": "query",
                "required": false,
                "type": "string",
                "description": "Filter by status. Default is `Applicants`."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "profile_key",
                "description": "Filters by a specific freelancer's profile key'. Example: `~01d54a7xxxxx125731`."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "agency_team__reference",
                "description": "The reference ID of the agency."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "min_score",
                "description": "."
            },
            {
                "enum": [
                    "Newest",
                    "Oldest",
                    "RecommendationScoreAsc",
                    "RecommendationScoreDesc",
                    "FeedbackAsc",
                    "FeedbackDesc",
                    "HoursAsc",
                    "HoursDesc",
                    "RateAsc",
                    "RateDesc"
                ],
                "name": "order_by",
                "paramType": "query",
                "required": false,
                "type": "string",
                "description": "Sorts results. Default is `Newest`."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "page",
                "description": "Pagination, formed as `$offset;$count`. Example: `page=2;10`."
            }
        ],
        "notes": "This call lists all job applications received by a client.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "Internal Server Error",
                "code": 500
            }
        ],
        "summary": "List job applications as a client.",
        "outputFields": [
            {
                "name": "applicationUid",
                "description": "Application ID"
            },
            {
                "name": "openingUid",
                "description": "Job UID"
            },
            {
                "name": "profileUid",
                "description": "Profile UID"
            },
            {
                "name": "status",
                "description": "Current status of the job application"
            },
            {
                "name": "createdTs",
                "description": "Timestamp when the job application was created"
            },
            {
                "name": "modifiedTs",
                "description": "Timestamp when the job application was last updated"
            },
            {
                "name": "coverLetter",
                "description": "Text of cover letter"
            },
            {
                "name": "questionsAnswers.question",
                "description": "A client's question"
            },
            {
                "name": "questionsAnswers.answer",
                "description": "A freelancer's answer"
            },
            {
                "name": "hourlyChargeRate.currencyCode",
                "description": "Currency"
            },
            {
                "name": "hourlyChargeRate.amount",
                "description": "The amount charged"
            },
            {
                "name": "fixedChargeAmount.currencyCode",
                "description": "Currency"
            },
            {
                "name": "fixedChargeAmount.amount",
                "description": "The amount charged"
            },
            {
                "name": "recommended",
                "description": "Flag to indicate if the application is recommended"
            },
            {
                "name": "hidden",
                "description": "Flag to indicate if the application is hidden"
            },
            {
                "name": "shortlisted",
                "description": "Flag to indicate if the application is shortlisted"
            },
            {
                "name": "read",
                "description": "Flag to indicate if the application has been read"
            },
            {
                "name": "vendorOrgUid",
                "description": "The UID of the organization to which the applied person belongs"
            },
            {
                "name": "hiddenByBuyer",
                "description": "Flag to indicate if the application is hidden by a client"
            },
            {
                "name": "attachments.link",
                "description": "Link to an attachment"
            },
            {
                "name": "attachments.name",
                "description": "Name"
            },
            {
                "name": "attachments.size",
                "description": "Size"
            },
            {
                "name": "applyingAs",
                "description": "Context under which the job application was made: \"freelancer\" or \"agency\""
            },
            {
                "name": "ciphertext",
                "description": "Profile key linked with the proper profileUid"
            },
            {
                "name": "openingCiphertext",
                "description": "Job key linked with the proper openingUid"
            }
        ],
        "nickname": "getClientJobApplications",
        "method": "GET"
    },
    "/api/hr/v2/jobs/{job_key}.{format}:DELETE": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "job_key",
                "description": "Job key. For example: `~0150f0d859bb3453d0`."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "enum": [
                    "67",
                    "51",
                    "49",
                    "41",
                    "34"
                ],
                "name": "reason_code",
                "paramType": "query",
                "required": true,
                "type": "string",
                "description": "The reason code to cancel the job. Valid values are: `67` - Accidental opening creation; `51` - All positions filled; `49` - Filled by alternate source; `41` - Project was cancelled; `34` - No developer for requested skills."
            }
        ],
        "notes": "This call cancels a job post.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden (operation is unauthorized)",
                "code": 403
            }
        ],
        "summary": "Cancel the job.",
        "scope": "Create, modify and remove job posts",
        "nickname": "cancelJob",
        "method": "DELETE"
    },
    "/api/messages/v3/{company_user_id}/stories/batch.{format}:POST": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "company_user_id",
                "description": "The company ID or team ID, or user ID. Use 'List companies' or 'List teams' API calls to get the team/company IDs."
            },
            {
                "name": "format",
                "paramType": "path",
                "required": false,
                "type": "string",
                "defaultValue": "json",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "room_ids",
                "description": "The IDs of the rooms, delimited by `;`, e.g. `room_abcd;room_qwer`. Maximum 50 rooms per one request."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "message",
                "description": "The custom user message associated with this Action and Object, if any.  There is a configurable hard limit of 10KB on the length of the message."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "userId",
                "description": "The user ID of the author of the story. This is the user that performed the action."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "orgId",
                "description": "The org ID of the author of the story. If a `userId` is provided, an `orgId` must be provided too."
            }
        ],
        "notes": "Adds a new story to the list of the given rooms.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            }
        ],
        "summary": "Send a message to a batch of rooms.",
        "scope": "Create a new room, update an existent one or post a message in the room",
        "nickname": "messagesSendMessageBatch",
        "method": "POST"
    },
    "/api/hr/v2/jobs.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": true,
                "type": "string",
                "name": "buyer_team__reference",
                "description": "The reference ID of the client's team. Example: `34567`. You can get it from List teams API call."
            },
            {
                "enum": [
                    "0",
                    "1"
                ],
                "name": "include_sub_teams",
                "paramType": "query",
                "required": false,
                "type": "string",
                "description": "If set to `1`, the response includes information about sub teams."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "created_by",
                "description": "The user ID. Example: `created_by=1234`."
            },
            {
                "enum": [
                    "open",
                    "filled",
                    "cancelled"
                ],
                "name": "status",
                "paramType": "query",
                "required": false,
                "type": "string",
                "description": "The status of the job."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "created_time_from",
                "description": "Filters by 'from' time. Example: `created_time_from=2008-09-09T00:00:01`."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "created_time_to",
                "description": "Filters by 'to' time. Example: `created_time_to=2009-01-20T11:59:59`."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "page",
                "description": "Pagination, formed as `$offset;$count`. Example: `page=20;10`"
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "order_by",
                "description": "Sorts results by the value defined. Example: `order_by=created_time`."
            }
        ],
        "notes": "This call returns all jobs that a user has `manage_recruiting` access to. It can be used to find the reference/key ID of a specific job.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden (operation is unauthorized)",
                "code": 403
            }
        ],
        "summary": "List jobs user has access to.",
        "outputFields": [
            {
                "name": "created_by_name",
                "description": "Hiring Manager name"
            },
            {
                "name": "job_ref_ciphertext",
                "description": "Job unique ID"
            },
            {
                "name": "reference",
                "description": "Job reference"
            },
            {
                "name": "visibility",
                "description": "Job visibility (public or auth)"
            },
            {
                "name": "skills",
                "description": "Comma separated list of skills in the job"
            },
            {
                "name": "keep_open_on_hire",
                "description": "Keep open the job once someone is hired for it"
            },
            {
                "name": "category2",
                "description": "The job category (V2)"
            },
            {
                "name": "attachment_file_url",
                "description": "URL of the attachment uploaded along with the job"
            },
            {
                "name": "buyer_company__reference",
                "description": "Client's company ID"
            },
            {
                "name": "buyer_team__reference",
                "description": "Client's team ID"
            },
            {
                "name": "created_time",
                "description": "Date job was created"
            },
            {
                "name": "duration",
                "description": "The intended duration of the job"
            },
            {
                "name": "description",
                "description": "The job description"
            },
            {
                "name": "buyer_company__name",
                "description": "Client's company name"
            },
            {
                "name": "subcategory2",
                "description": "Subcategory (V2) of the job"
            },
            {
                "name": "job_type",
                "description": "Hourly or fixed price job type"
            },
            {
                "name": "end_date",
                "description": "The intended end date of the job"
            },
            {
                "name": "title",
                "description": "Job title"
            },
            {
                "name": "status",
                "description": "Job status. Values can be: open, filled, cancelled"
            },
            {
                "name": "budget",
                "description": "The intended budget of the job"
            },
            {
                "name": "public_url",
                "description": "The url to the job's public profile"
            },
            {
                "name": "range_num_candidates",
                "description": "The number of candidates that applied to this job. This is a range, not an absolute number"
            },
            {
                "name": "filled_date",
                "description": "The date that the job is filled"
            },
            {
                "name": "start_date",
                "description": "the intended start date of the job"
            },
            {
                "name": "buyer_team__name",
                "description": "The team name"
            },
            {
                "name": "cancelled_date",
                "description": "Date job was cancelled"
            },
            {
                "name": "preference_candidate_type",
                "description": "Preferred candidate type (IC/AC)"
            },
            {
                "name": "category_uid",
                "description": "The category (V2) reference"
            }
        ],
        "scope": "View your job posts",
        "nickname": "getJobList",
        "method": "GET"
    },
    "/api/hr/v3/clients/applications.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "name": "buyer_team__reference",
                "allowMultiple": false,
                "required": true,
                "type": "string",
                "paramType": "query",
                "description": "The reference ID of the client's team. It allows getting applications for a specific team. Example: `34567`. Use 'List Teams' API call to get it."
            },
            {
                "name": "job_key",
                "allowMultiple": false,
                "required": true,
                "type": "string",
                "paramType": "query",
                "description": "The job key. It allows getting applications for a specific job. Example: `~01d54a7xxxxx125731`."
            },
            {
                "enum": [
                    "shortlisted",
                    "messaged",
                    "hired",
                    "offered",
                    "declined",
                    "hidden"
                ],
                "name": "status",
                "paramType": "query",
                "required": false,
                "type": "string",
                "allowMultiple": false,
                "description": "The current status of the job application."
            },
            {
                "name": "profile_key",
                "allowMultiple": false,
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "Filters by a specific freelancer's profile key."
            },
            {
                "name": "agency_team__reference",
                "allowMultiple": false,
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "The reference ID of the agency."
            },
            {
                "name": "order_by",
                "allowMultiple": false,
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "Sorts results in format `$field_name1;$field_name2;..$field_nameN;AD...A`. Here `A` stands for ascending order, `D` - descending order. Example: `order_by=created_time;D`."
            },
            {
                "name": "page",
                "allowMultiple": false,
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "Pagination, formed as `$offset;$count`. Example: `page=20;10`."
            }
        ],
        "notes": "This call lists all job applications received by a client.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "No recruiter or hiring manager permissions",
                "code": 403
            },
            {
                "message": "No access to team/company",
                "code": 403
            }
        ],
        "summary": "List job applications as a client.",
        "outputFields": [
            {
                "name": "rid",
                "description": "Record ID"
            },
            {
                "name": "created_type",
                "description": "Which side creates the application. Values can be: buyer (which means client) or provider (which means contractor)"
            },
            {
                "name": "is_shortlisted",
                "description": "If job is shortlisted"
            },
            {
                "name": "job__reference",
                "description": "The reference id of the job that the application is for"
            },
            {
                "name": "is_hidden",
                "description": "Indicates whether the job is hidden"
            },
            {
                "name": "status",
                "description": "Candidacy status"
            },
            {
                "name": "is_viewed",
                "description": "If application was viewed by current user (client or contractor)"
            },
            {
                "name": "interview_status",
                "description": "The interview status of the candidacy. The values can be: in_process, waiting_for_provider, waiting_for_buyer or none"
            },
            {
                "name": "is_undecided",
                "description": "Whether the application is hidden by client or shortlisted"
            },
            {
                "name": "is_auto_hidden",
                "description": "The flag for auto hidden option"
            },
            {
                "name": "job_type",
                "description": "Job type of the job in the application"
            },
            {
                "name": "hr_charge_rate",
                "description": "Hourly charge rate"
            },
            {
                "name": "job_pref_matches.prefs_total",
                "description": "Total matches"
            },
            {
                "name": "job_pref_matches.prefs_match",
                "description": "Matched preferences"
            },
            {
                "name": "ui_opening_title",
                "description": "Job title"
            },
            {
                "name": "contractor_name",
                "description": "Contractor's name"
            },
            {
                "name": "contractor_ref",
                "description": "The id of the contractor that the offer is for"
            },
            {
                "name": "contractor_title",
                "description": "Contractor's title"
            },
            {
                "name": "offer_status",
                "description": "Offer's status"
            },
            {
                "name": "fp_amount_agreed",
                "description": "Aggreed charge amount for fixed-price offer"
            },
            {
                "name": "invite_letter",
                "description": "Message provided by client in the invitation"
            },
            {
                "name": "is_hidden_by_buyer",
                "description": "Is the job hidden by buyer"
            },
            {
                "name": "is_hidden_by_provider",
                "description": "Is the job hidden by provider"
            },
            {
                "name": "is_seen_by_buyer",
                "description": "If offer was viewed by current user (client or contractor)"
            },
            {
                "name": "opening_ciphertext",
                "description": "The key of the job that the offer is for"
            },
            {
                "name": "cover_letter",
                "description": "A message from provider"
            },
            {
                "name": "feedback_score",
                "description": "Feedback score for provider"
            },
            {
                "name": "contractor_portrait_url",
                "description": "Contractor's portrait URL"
            },
            {
                "name": "total_hours",
                "description": "The total amount of provider's hours"
            },
            {
                "name": "ctime_epoch",
                "description": "Time of creation"
            },
            {
                "name": "hr_pay_rate",
                "description": "Hourly pay rate"
            },
            {
                "name": "fp_pay_amount",
                "description": "Agreed pay amount for fixed-price job"
            },
            {
                "name": "fp_upfront_payment",
                "description": "Upfront payment for fixed-price job"
            },
            {
                "name": "engagement_duration_ref",
                "description": "Engagement duration reference"
            },
            {
                "name": "job__description",
                "description": "Job description"
            },
            {
                "name": "team_nid",
                "description": "Team ID"
            },
            {
                "name": "contractor_ciphertext",
                "description": "Contractor's ciphertext"
            },
            {
                "name": "question_answer",
                "description": "Question/answer history"
            },
            {
                "name": "is_recommended",
                "description": "The flag identifies the possible recommendation"
            },
            {
                "name": "client.company_ref",
                "description": "Company reference"
            },
            {
                "name": "client.company_name",
                "description": "Company name"
            }
        ],
        "scope": "View your job applications",
        "nickname": "listClientJobApplications",
        "method": "GET"
    },
    "/api/offers/v1/clients/offers.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "name": "company_id",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "The client's company reference ID. Example: `34567`. Get it using 'List companies' API call. If `company_id` is not specified, the API will infer it from job's data relying on the provided `job__reference` parameter. Either `company_id` or `job__reference` parameter must be specified."
            },
            {
                "name": "job__reference",
                "paramType": "query",
                "required": false,
                "conditionallyRequired": true,
                "type": "string",
                "description": "The job reference ID. Get it using 'List jobs' API call. Note that either `job__reference` or `company_id` parameter should be specified."
            },
            {
                "enum": [
                    "accepted",
                    "new",
                    "declined",
                    "expired",
                    "withdrawn",
                    "cancelled",
                    "changed"
                ],
                "name": "status",
                "defaultValue": "new",
                "required": false,
                "allowMultiple": false,
                "type": "string",
                "paramType": "query",
                "description": "The current status of the offer. By default only offers in status `new` are returned."
            },
            {
                "name": "page",
                "allowMultiple": false,
                "required": false,
                "type": "string",
                "paramType": "query",
                "description": "Pagination, formed as `$offset;$count`. Example: `page=20;10`"
            }
        ],
        "notes": "This resource lists all offers made by a client.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "No recruiter or hiring manager permissions",
                "code": 403
            },
            {
                "message": "No access to team/company",
                "code": 403
            }
        ],
        "summary": "List offers as a client.",
        "outputFields": [
            {
                "name": "rid",
                "description": "Offer ID"
            },
            {
                "name": "offer_description",
                "description": "First event message if exists"
            },
            {
                "name": "client_user_ref",
                "description": "Client reference ID"
            },
            {
                "name": "client_org_ref",
                "description": "Client's organization reference ID"
            },
            {
                "name": "contractor_user_ref",
                "description": "Contractor reference ID"
            },
            {
                "name": "contractor_org_ref",
                "description": "Contractor's organization reference ID"
            },
            {
                "name": "title",
                "description": "Offer Title"
            },
            {
                "name": "type",
                "description": "Offer type. Can be either 'hourly' or 'fixed'"
            },
            {
                "name": "last_event_state",
                "description": "Status of the offer. Status can be 'accepted', 'new', 'declined', 'expired', 'withdrawn', 'cancelled' and 'changed'"
            },
            {
                "name": "is_visible_to_contractor",
                "description": "Flag to identify contractor visibility to the offer"
            },
            {
                "name": "job_posting_ref",
                "description": "Relevant job key"
            },
            {
                "name": "terms_data.charge_weekly_stipend_amount",
                "description": "Weekly charge amount according to terms"
            },
            {
                "name": "terms_data.charge_rate",
                "description": "Charge rate according to terms"
            },
            {
                "name": "terms_data.charge_amount",
                "description": "Charge amount according to terms"
            },
            {
                "name": "terms_data.charge_upfront_percent",
                "description": "Charge upfront percent according to terms"
            },
            {
                "name": "terms_data.start_date",
                "description": "Start date according to terms"
            },
            {
                "name": "terms_data.type",
                "description": "Type of work according to terms"
            },
            {
                "name": "terms_data.weekly_limit",
                "description": "Weekly limit for hourly job according to terms"
            },
            {
                "name": "terms_data.manual_time_allowed",
                "description": "Flag identicating if manual time is allowed according to terms"
            },
            {
                "name": "milestones.deposit_amount",
                "description": "Deposit amount"
            },
            {
                "name": "milestones.description",
                "description": "Milestone description"
            },
            {
                "name": "milestones.due_date",
                "description": "Milestone ETA"
            },
            {
                "name": "milestones.state",
                "description": "Milestone state. Possible values are: `not_funded`, `in_offer`, `active`, `submitted`, `rejected`, `rejected_by_odesk`, `paid`, `paid_by_odesk`, `not_funded_closed`, `cancelled_by_client`, `cancelled_by_contractor`, `offer_cancelled`"
            },
            {
                "name": "milestones.id",
                "description": "Unique milestone ID"
            }
        ],
        "scope": "View your job offers",
        "nickname": "listClientOffers",
        "method": "GET"
    },
    "/api/offers/v1/contractors/actions/{offer_id}.{format}:POST": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "string",
                "name": "offer_id",
                "description": "Offer reference ID."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "json",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "enum": [
                    "accept",
                    "decline"
                ],
                "name": "name",
                "defaultValue": "",
                "required": true,
                "type": "string",
                "paramType": "query",
                "description": "The name of the action."
            }
        ],
        "notes": "Allows a freelancer to accept or decline an offer. In order to use this call the authorized user needs to be the offer owner or have staffing manager permissions to the agency.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "Forbidden",
                "code": 403
            },
            {
                "message": "Bad Request",
                "code": 400
            }
        ],
        "summary": "Accept or decline offer",
        "scope": "Make a job offer on your behalf",
        "nickname": "offerActions",
        "method": "POST"
    },
    "/api/tasks/v2/tasks/contracts/{engagement_ref}.{format}:GET": {
        "authorizations": [],
        "parameters": [
            {
                "paramType": "path",
                "required": true,
                "type": "integer",
                "name": "engagement_ref",
                "description": "Engagement reference ID. You can get it using 'List engagemnets' API call. Example: `1234`."
            },
            {
                "enum": [
                    "json",
                    "xml"
                ],
                "name": "format",
                "defaultValue": "xml",
                "required": false,
                "type": "string",
                "paramType": "path",
                "description": "Response format."
            },
            {
                "paramType": "query",
                "required": false,
                "type": "string",
                "name": "page",
                "description": "Pagination, formed as `$offset;$count`. Example: `page=50;50`."
            }
        ],
        "notes": "Authorized user must have hiring permissions in order to use this API call.",
        "responseMessages": [
            {
                "message": "Unauthorized",
                "code": 401
            },
            {
                "message": "No access to company with this contract",
                "code": 403
            }
        ],
        "summary": "Lists activities for specific engagement.",
        "scope": "View task codes",
        "nickname": "listEngagementActivities",
        "method": "GET"
    }
}